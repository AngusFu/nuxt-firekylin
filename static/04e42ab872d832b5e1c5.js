(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{207:function(t,r,v){"use strict";v.r(r);var e={computed:{data:function(){return{title:"[译] 深入 JavaScript 数组：进化与性能",description:"深入 JavaScript 数组：进化与性能",keywords:"翻译,JavaScript",pathname:"javascript-array-evolution-performance",translation:{author:"Paul Shan",social:"http://voidcanvas.com/author/paulshan/",from:"http://voidcanvas.com/javascript-array-evolution-performance/"},create_time:"2017-09-12",prev:{title:"[译] 极速渲染引擎 WebRender 揭秘",pathname:"firefox-webrender"},next:{title:"ArrayBuffer and TypedArray in ES2015",pathname:"es2015-arraybuffer"}}}}},_=v(3),component=Object(_.a)(e,function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("post",{attrs:{data:t.data}},[v("p",[t._v("正式开始前需要声明，本文并不是要讲解 JavaScript 数组基础知识，也不会涉及语法和使用案例。本文讲得更多的是内存、优化、语法差异、性能、近来的演进。")]),t._v(" "),v("p",[t._v("在使用 JavaScript 前，我对 C、C++、C# 这些已经颇为熟悉。与许多 C/C++ 开发者一样，JavaScript 给我的第一印象并不好。")]),t._v(" "),v("p",[v("code",[t._v("Array")]),t._v(" 是主要原因之一。JavaScript 数组不是连续（contiguous）的，其实现类似哈希映射（hash-maps）或字典（dictionaries）。我觉得这有点像是一门 B 级语言，数组实现根本不恰当。自那以后，JavaScript 和我对它的理解都发生了变化，很多变化。")]),t._v(" "),v("h2",{attrs:{id:"-javascript-"}},[t._v("为什么说 JavaScript 数组不是真正的数组")]),t._v(" "),v("p",[t._v("在聊 JavaScript 之前，先讲讲 "),v("code",[t._v("Array")]),t._v(" 是什么。")]),t._v(" "),v("p",[t._v("数组是一串连续的内存位置，用来保存某些值。注意重点，“连续”（"),v("code",[t._v("continuous")]),t._v("，或 "),v("code",[t._v("contiguous")]),t._v("），这很重要。")]),t._v(" "),v("p",[v("a",{attrs:{href:"http://p0.qhimg.com/t013e8a7ea0ed65a53e.png",target:"_blank"}},[v("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t013e8a7ea0ed65a53e.png",expression:"`https://p.ssl.qhimg.com/t013e8a7ea0ed65a53e.png`"}],attrs:{alt:"数组内存示意图"}})])]),t._v(" "),v("p",[t._v("上图展示了数组在内存中存储方式。这个数组保存了 4 个元素，每个元素 4 字节。加起来总共占用了 16 字节的内存区。")]),t._v(" "),v("p",[t._v("假设我们声明了 "),v("code",[t._v("tinyInt arr[4];")]),t._v("，分配到的内存区的地址从 "),v("code",[t._v("1201")]),t._v(" 开始。一旦需要读取 "),v("code",[t._v("arr[2]")]),t._v("，只需要通过数学计算拿到 "),v("code",[t._v("arr[2]")]),t._v(" 的地址即可。计算 "),v("code",[t._v("1201 + (2 X 4)")]),t._v("，直接从 "),v("code",[t._v("1209")]),t._v(" 开始读取即可。")]),t._v(" "),v("p",[v("a",{attrs:{href:"http://res.cloudinary.com/dqubepfgb/image/upload/v1504384650/old-array-js_o8ufwz.png",target:"_blank"}},[v("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t0108bfb507aa331fad.png",expression:"`https://p.ssl.qhimg.com/t0108bfb507aa331fad.png`"}],attrs:{alt:"javascript 链表"}})])]),t._v(" "),v("p",[t._v("JavaScript 中的数据是哈希映射，可以使用不同的数据结构来实现，如链表。所以，如果在 JavaScript 中声明一个数组 "),v("code",[t._v("var arr = new Array(4)")]),t._v("，计算机将生成类似上图的结构。如果程序需要读取 "),v("code",[t._v("arr[2]")]),t._v("，则需要从 "),v("code",[t._v("1201")]),t._v(" 开始遍历寻址。")]),t._v(" "),v("p",[t._v("以上就是 JavaScript 数组与真实数组的不同之处。显而易见，数学计算比遍历链表快。就长数组而言，情况尤其如此。")]),t._v(" "),v("h2",{attrs:{id:"javascript-"}},[t._v("JavaScript 数组的进化")]),t._v(" "),v("p",[t._v("不知你是否记得我们对朋友入手的 256MB 内存的电脑羡慕得要死的日子？而今天，8GB 内存遍地都是。")]),t._v(" "),v("p",[t._v("与此类似，JavaScript 这门语言也进化了不少。从 V8、SpiderMonkey 到 TC39 和与日俱增的 Web 用户，巨大的努力已经使 JavaScript 成为世界级必需品。一旦有了庞大的用户基础，性能提升自然是硬需求。")]),t._v(" "),v("p",[t._v("实际上，现代 JavaScript 引擎是会给数组分配连续内存的 —— 如果数组是同质的（所有元素类型相同）。优秀的程序员总会保证数组同质，以便 JIT（即时编译器）能够使用 "),v("code",[t._v("c")]),t._v(" 编译器式的计算方法读取元素。")]),t._v(" "),v("p",[t._v("不过，一旦你想要在某个同质数组中插入一个其他类型的元素，JIT 将解构整个数组，并按照旧有的方式重新创建。")]),t._v(" "),v("p",[t._v("因此，如果你的代码写得不太糟，JavaScript "),v("code",[t._v("Array")]),t._v(" 对象在幕后依然保持着真正的数组形式，这对现代 JS 开发者来说极为重要。")]),t._v(" "),v("p",[t._v("此外，数组跟随 ES2015/ES6 有了更多的演进。TC39 决定引入类型化数组（Typed Arrays），于是我们就有了 "),v("code",[t._v("ArrayBuffer")]),t._v("。")]),t._v(" "),v("p",[v("code",[t._v("ArrayBuffer")]),t._v("  提供一块连续内存供我们随意操作。然而，直接操作内存还是太复杂、偏底层。于是便有了处理 ArrayBuffer 的视图（View）。目前已有一些可用视图，未来还会有更多加入。")]),t._v(" "),v("pre",[v("code",{staticClass:"hljs lang-javascript"},[v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" buffer = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("ArrayBuffer")]),t._v("("),v("span",{staticClass:"hljs-number"},[t._v("8")]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" view   = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("Int32Array")]),t._v("(buffer);\nview["),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("] = "),v("span",{staticClass:"hljs-number"},[t._v("100")]),t._v(";")])]),v("p",[t._v("了解更多关于类型化数组（Typed Arrays）的知识，请访问 "),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays",target:"_blank"}},[t._v("MDN 文档")]),t._v("。")]),t._v(" "),v("p",[t._v("高性能、高效率的类型化数组在 WebGL 之后被引入。WebGL 工作者遇到了极大的性能问题，即如何高效处理二进制数据。另外，你也可以使用 "),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",target:"_blank"}},[t._v("SharedArrayBuffer")]),t._v(" 在多个 Web Worker 进程之间共享数据，以提升性能。")]),t._v(" "),v("p",[t._v("从简单的哈希映射到现在的 "),v("code",[t._v("SharedArrayBuffer")]),t._v("，这相当棒吧？")]),t._v(" "),v("h2",{attrs:{id:"-vs-"}},[t._v("旧式数组 vs 类型化数组：性能")]),t._v(" "),v("p",[t._v("前面已经讨论了 JavaScript 数组的演进，现在来测试现代数组到底能给我们带来多大收益。下面是我在 Mac 上使用 "),v("code",[t._v("Node.js 8.4.0")]),t._v(" 进行的一些微型测试结果。")]),t._v(" "),v("h3",{attrs:{id:"-"}},[t._v("旧式数组：插入")]),t._v(" "),v("pre",[v("code",{staticClass:"hljs lang-javascript"},[v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" LIMIT = "),v("span",{staticClass:"hljs-number"},[t._v("10000000")]),t._v(";\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" arr = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("Array")]),t._v("(LIMIT);\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),v("span",{staticClass:"hljs-string"},[t._v('"Array insertion time"')]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < LIMIT; i++) {\narr[i] = i;\n}\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".timeEnd("),v("span",{staticClass:"hljs-string"},[t._v('"Array insertion time"')]),t._v(");")])]),v("p",[v("strong",[t._v("用时："),v("em",[t._v("55ms")])])]),t._v(" "),v("h3",{attrs:{id:"typed-array-"}},[t._v("Typed Array：插入")]),t._v(" "),v("pre",[v("code",{staticClass:"hljs lang-javascript"},[v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" LIMIT = "),v("span",{staticClass:"hljs-number"},[t._v("10000000")]),t._v(";\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" buffer = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("ArrayBuffer")]),t._v("(LIMIT * "),v("span",{staticClass:"hljs-number"},[t._v("4")]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" arr = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("Int32Array")]),t._v("(buffer);\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),v("span",{staticClass:"hljs-string"},[t._v('"ArrayBuffer insertion time"')]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < LIMIT; i++) {\narr[i] = i;\n}\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".timeEnd("),v("span",{staticClass:"hljs-string"},[t._v('"ArrayBuffer insertion time"')]),t._v(");")])]),v("p",[v("strong",[t._v("用时："),v("em",[t._v("52ms")])])]),t._v(" "),v("p",[t._v("擦，我看到了什么？旧式数组和 ArrayBuffer 的性能不相上下？不不不。请记住，前面提到过，现代编译器已经智能化，能够将元素类型相同的传统数组在内部转换成内存连续的数组。第一个例子正是如此。尽管使用了 "),v("code",[t._v("new Array(LIMIT)")]),t._v("，数组实际依然以现代数组形式存在。")]),t._v(" "),v("p",[t._v("接着修改第一例子，将数组改成异构型（元素类型不完全一致）的，来看看是否存在性能差异。")]),t._v(" "),v("h3",{attrs:{id:"-"}},[t._v("旧式数组：插入（异构）")]),t._v(" "),v("pre",[v("code",{staticClass:"hljs lang-javascript"},[v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" LIMIT = "),v("span",{staticClass:"hljs-number"},[t._v("10000000")]),t._v(";\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" arr = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("Array")]),t._v("(LIMIT);\narr.push({"),v("span",{staticClass:"hljs-attr"},[t._v("a")]),t._v(": "),v("span",{staticClass:"hljs-number"},[t._v("22")]),t._v("});\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),v("span",{staticClass:"hljs-string"},[t._v('"Array insertion time"')]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < LIMIT; i++) {\narr[i] = i;\n}\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".timeEnd("),v("span",{staticClass:"hljs-string"},[t._v('"Array insertion time"')]),t._v(");")])]),v("p",[v("strong",[t._v("用时："),v("em",[t._v("1207ms")])])]),t._v(" "),v("p",[t._v("改变发生在第 3 行，添加一条语句，将数组变为异构类型。其余代码保持不变。性能差异表现出来了，"),v("code",[t._v("慢了 22 倍")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"-"}},[t._v("旧式数组：读取")]),t._v(" "),v("pre",[v("code",{staticClass:"hljs lang-javascript"},[v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" LIMIT = "),v("span",{staticClass:"hljs-number"},[t._v("10000000")]),t._v(";\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" arr = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("Array")]),t._v("(LIMIT);\narr.push({"),v("span",{staticClass:"hljs-attr"},[t._v("a")]),t._v(": "),v("span",{staticClass:"hljs-number"},[t._v("22")]),t._v("});\n"),v("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < LIMIT; i++) {\narr[i] = i;\n}\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" p;\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),v("span",{staticClass:"hljs-string"},[t._v('"Array read time"')]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < LIMIT; i++) {\n"),v("span",{staticClass:"hljs-comment"},[t._v("//arr[i] = i;")]),t._v("\np = arr[i];\n}\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".timeEnd("),v("span",{staticClass:"hljs-string"},[t._v('"Array read time"')]),t._v(");")])]),v("p",[v("strong",[t._v("用时："),v("em",[t._v("196ms")])])]),t._v(" "),v("h3",{attrs:{id:"typed-array-"}},[t._v("Typed Array：读取")]),t._v(" "),v("pre",[v("code",{staticClass:"hljs lang-javascript"},[v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" LIMIT = "),v("span",{staticClass:"hljs-number"},[t._v("10000000")]),t._v(";\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" buffer = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("ArrayBuffer")]),t._v("(LIMIT * "),v("span",{staticClass:"hljs-number"},[t._v("4")]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" arr = "),v("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),v("span",{staticClass:"hljs-built_in"},[t._v("Int32Array")]),t._v("(buffer);\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),v("span",{staticClass:"hljs-string"},[t._v('"ArrayBuffer insertion time"')]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < LIMIT; i++) {\narr[i] = i;\n}\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),v("span",{staticClass:"hljs-string"},[t._v('"ArrayBuffer read time"')]),t._v(");\n"),v("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),v("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < LIMIT; i++) {\n"),v("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" p = arr[i];\n}\n"),v("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".timeEnd("),v("span",{staticClass:"hljs-string"},[t._v('"ArrayBuffer read time"')]),t._v(");")])]),v("p",[v("strong",[t._v("用时："),v("em",[t._v("27ms")])])]),t._v(" "),v("h2",{attrs:{id:"-"}},[t._v("结论")]),t._v(" "),v("p",[t._v("类型化数组的引入是 JavaScript 发展历程中的一大步。Int8Array，Uint8Array，Uint8ClampedArray，Int16Array，Uint16Array，Int32Array，Uint32Array，Float32Array，Float64Array，这些是类型化数组视图，使用原生字节序（与本机相同）。我们还可以使用 "),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",target:"_blank"}},[t._v("DataView")]),t._v(" 创建自定义视图窗口。希望未来会有更多帮助我们轻松操作 ArrayBuffer 的 DataView 库。")]),t._v(" "),v("p",[t._v("JavaScript 数组的演进非常 nice。现在它们速度快、效率高、健壮，在内存分配时也足够智能。")]),t._v(" "),v("h2",{attrs:{id:"-"}},[t._v("相关文章")]),t._v(" "),v("ol",[v("li",[v("p",[v("a",{attrs:{href:"http://voidcanvas.com/is-javascript-really-interpreted-or-compiled-language/",target:"_blank",title:"Is JavaScript really interpreted or compiled language?"}},[t._v("Is JavaScript really interpreted or compiled language?")])])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"http://voidcanvas.com/create-filter-an-array-to-have-only-unique-elements-in-it/",target:"_blank",title:"Create / filter an array to have only unique elements in it"}},[t._v("Create / filter an array to have only unique elements in it")])])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"http://voidcanvas.com/object-entries-object-values-ecmascript2017-es8-examples/",target:"_blank",title:"Object.entries() & Object.values() in EcmaScript2017 (ES8) with examples"}},[t._v("Object.entries() & Object.values() in EcmaScript2017 (ES8) with examples")])])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"http://voidcanvas.com/import-vs-require/",target:"_blank",title:"import vs require – ESM & commonJs module differences"}},[t._v("import vs require – ESM & commonJs module differences")])])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"http://voidcanvas.com/deep-dive-ember-routers-ember-js-tutorial-part-5/",target:"_blank",title:"A deep dive into ember routers – Ember.js Tutorial part 5"}},[t._v("A deep dive into ember routers – Ember.js Tutorial part 5")])])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"http://voidcanvas.com/myths-facts-javascript/",target:"_blank",title:"Myths and Facts of JavaScript"}},[t._v("Myths and Facts of JavaScript")])])])])])},[],!1,null,null,null);r.default=component.exports}}]);