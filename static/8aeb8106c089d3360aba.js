(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{241:function(t,n,l){"use strict";l.r(n);var o={computed:{data:function(){return{title:"[译] 测试驱动开发：使用 Node.js 和 MongoDB 构建 Todo API",description:"测试驱动开发：使用 Node.js 和 MongoDB 构建 Todo API",keywords:"翻译,Node.js,测试,单元测试",pathname:"todo-api-with-unit-test",translation:{author:"Raja Sekar",social:"http://rajasekarm.com/",from:"https://semaphoreci.com/community/tutorials/a-tdd-approach-to-building-a-todo-api-using-node-js-and-mongodb"},create_time:"2016-07-04",prev:{title:"Node.js .sh scripts Manager",pathname:"Node.js-sh-scripts-Manager"},next:{title:"判断资源并行加载完成的三种办法：计数、Promise及 $.Deferred",pathname:"when-are-all-resources-all-loaded"}}}}},e=l(3),component=Object(e.a)(o,function(){var t=this,n=t.$createElement,l=t._self._c||n;return l("post",{attrs:{data:t.data}},[l("p",[t._v("学习如何使用测试驱动开发的方式，用 Node.js、MongoDB、Mocha 和 Sinon.js 开发 Todo API。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("简介")]),t._v(" "),l("p",[t._v("测试是软件开发过程中的一个完整部分，它帮助我们提升软件品质。有很多种测试方法，如手动测试，集成测试，功能测试，负载测试，单元测试等等。在本文中，我们将会遵循测试驱动开发的规则编写代码。")]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("单元测试是什么？")]),t._v(" "),l("p",[t._v("Martin Fowler 将单元测试定义如下：")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("首先一个概念，单元测试是低层次的，专注于软件系统的一小部分；")])]),t._v(" "),l("li",[l("p",[t._v("其次，单元测试通常是由程序员使用常规工具自己编写的 —— 唯一的区别是使用某种单元测试框架；")])]),t._v(" "),l("li",[l("p",[t._v("再次，单元测试预计比其他类型的测试显著地更快。")])])]),t._v(" "),l("p",[t._v("在本教程中，我们将会使用 Node.js 和 MongoDB 构建一个 Todo API。我们首先会给生产代码写单元测试，然后才会真正写生产代码。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("环境")]),t._v(" "),l("ul",[l("li",[t._v("Express.js")]),t._v(" "),l("li",[t._v("MongoDB")]),t._v(" "),l("li",[t._v("Mocha")]),t._v(" "),l("li",[t._v("Chai")]),t._v(" "),l("li",[t._v("Sinon.js")])]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("项目设置")]),t._v(" "),l("p",[t._v("在我们真正开发 API 之前，我们必须设置文件夹和端点（end point）。")]),t._v(" "),l("p",[t._v("在软件项目中，没有最好的应用架构。本教程使用的文件结构，请看该 "),l("a",{attrs:{href:"https://github.com/rajzshkr/todoapi",target:"_blank"}},[t._v("GitHub")]),t._v(" 仓库。")]),t._v(" "),l("p",[t._v("现在来创建端点（endpoints）：")]),t._v(" "),l("p",[l("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t019ce24b482a7f3229.png",expression:"`https://p.ssl.qhimg.com/t019ce24b482a7f3229.png`"}],attrs:{alt:"table"}})]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("安装依赖")]),t._v(" "),l("p",[t._v("Node.js 有自己的包管理工具 "),l("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank"}},[t._v("NPM")]),t._v("。要学习更多关于 NPM 的知识，可以看我们的另一篇教程，"),l("a",{attrs:{href:"https://semaphoreci.com/community/tutorials/npm-node-js-package-manager",target:"_blank"}},[t._v("《Node.js Package Manager tutorial》")]),t._v("。")]),t._v(" "),l("p",[t._v("好，我们来安装项目依赖。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("npm install express mongoose method-override morgan body-parser cors —save-dev")])]),l("h2",{attrs:{id:"-schema"}},[t._v("定义 Schema")]),t._v(" "),l("p",[t._v("我们会使用 Mongoose 作为 Node.js 中的对象文档模型（Object Document Model），它工作起来和典型的 ORM一样，就像 Rails 中用 ActiveRecord一样。Mongoose 帮我们更方便地访问 MongoDB 命令。首先我们为 Todo API 定义 schema。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" mongoose = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'mongoose'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" Schema = mongoose.Schema;\n"),l("span",{staticClass:"hljs-comment"},[t._v("// Defining schema for our Todo API")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoSchema = Schema({\n  "),l("span",{staticClass:"hljs-attr"},[t._v("todo")]),t._v(": {\n    "),l("span",{staticClass:"hljs-attr"},[t._v("type")]),t._v(": "),l("span",{staticClass:"hljs-built_in"},[t._v("String")]),t._v("\n  },\n  "),l("span",{staticClass:"hljs-attr"},[t._v("completed")]),t._v(": {\n    "),l("span",{staticClass:"hljs-attr"},[t._v("type")]),t._v(": "),l("span",{staticClass:"hljs-built_in"},[t._v("Boolean")]),t._v(",\n    "),l("span",{staticClass:"hljs-attr"},[t._v("default")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v("\n  },\n  "),l("span",{staticClass:"hljs-attr"},[t._v("created_by")]),t._v(": {\n    "),l("span",{staticClass:"hljs-attr"},[t._v("type")]),t._v(": "),l("span",{staticClass:"hljs-built_in"},[t._v("Date")]),t._v(",\n    "),l("span",{staticClass:"hljs-attr"},[t._v("default")]),t._v(": "),l("span",{staticClass:"hljs-built_in"},[t._v("Date")]),t._v(".now\n  }\n});\n"),l("span",{staticClass:"hljs-comment"},[t._v("//Exporting our model")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoModel = mongoose.model("),l("span",{staticClass:"hljs-string"},[t._v("'Todo'")]),t._v(", TodoSchema);\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("module")]),t._v(".exports = TodoModel;")])]),l("p",[t._v("Mongoose 中的一切都是从 schema 开始。每个 schema 对应一个 MongoDB 集合，它定义了集合中文档的形状。")]),t._v(" "),l("p",[t._v("在上面的 todo schema 中，我们创建了三个字段来存储 todo 描述、状态和创建日期。该 schema 帮助 Node.js 应用理解如何将 MongoDB 中的数据映射成 JavaScript 对象。")]),t._v(" "),l("h2",{attrs:{id:"-express-server"}},[t._v("搭建 Express Server")]),t._v(" "),l("p",[t._v("我们将使用 Express 来搭建服务器，它是一个小型 Node.js web 框架，提供了一个强大的功能集，用于开发Web应用程序。")]),t._v(" "),l("p",[t._v("我们继续，搭建 Express server。")]),t._v(" "),l("p",[t._v("首先，我们要按下面这样引入项目依赖：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" express = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'express'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" mongoose = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'mongoose'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" morgan = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'morgan'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" bodyParser = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'body-parser'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" methodOverride = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'method-override'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" app = express();\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" config = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'./app/config/config'")]),t._v(");")])]),l("p",[t._v("接着，配置 Express 中间件：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("app.use(morgan("),l("span",{staticClass:"hljs-string"},[t._v("'dev'")]),t._v(")); "),l("span",{staticClass:"hljs-comment"},[t._v("// log every request to the console")]),t._v("\napp.use(bodyParser.urlencoded({"),l("span",{staticClass:"hljs-string"},[t._v("'extended'")]),t._v(":"),l("span",{staticClass:"hljs-string"},[t._v("'true'")]),t._v("})); "),l("span",{staticClass:"hljs-comment"},[t._v("// parse application/x-www-form-urlencoded")]),t._v("\napp.use(bodyParser.json()); "),l("span",{staticClass:"hljs-comment"},[t._v("// parse application/json")]),t._v("\napp.use(bodyParser.json({ "),l("span",{staticClass:"hljs-attr"},[t._v("type")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'application/vnd.api+json'")]),t._v(" })); "),l("span",{staticClass:"hljs-comment"},[t._v("// parse application/vnd.api+json as json")]),t._v("\napp.use(methodOverride());")])]),l("h3",{attrs:{id:"-mongoose-"}},[t._v("管理 Mongoose 连接")]),t._v(" "),l("p",[t._v("使用"),l("code",[t._v("mongoose.connect")]),t._v("将 MongoDB 和应用连接，这会和数据库建立连接。这就是连接 todoapi 数据库的最小操作，数据库跑在本地，默认端口是 27017。如果本地连接失败，试试将 localhost 换成 127.0.0.1。")]),t._v(" "),l("p",[t._v("有时候本地主机名改变时会出现一些问题。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("//Connecting MongoDB using mongoose to our application")]),t._v("\nmongoose.connect(config.db);\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("//This callback will be triggered once the connection is successfully established to MongoDB")]),t._v("\nmongoose.connection.on("),l("span",{staticClass:"hljs-string"},[t._v("'connected'")]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'Mongoose default connection open to '")]),t._v(" + config.db);\n});\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("//Express application will listen to port mentioned in our configuration")]),t._v("\napp.listen(config.port, "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err")]),t._v(")")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(err) "),l("span",{staticClass:"hljs-keyword"},[t._v("throw")]),t._v(" err;\n  "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v('"App listening on port "')]),t._v("+config.port);\n});")])]),l("p",[t._v("使用下面的命令启动服务器：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-bash"},[t._v("//starting our node server\n> node server.js\nApp listening on port 2000")])]),l("h2",{attrs:{id:"-api-"}},[t._v("为 API 编写测试用例")]),t._v(" "),l("p",[t._v("在 TDD（测试驱动开发）中，将所有可能的输入、输出以及错误纳入考虑，然后开始编写测试用例。来给我们的 Todo API 编写测试用例吧。")]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("搭建测试环境")]),t._v(" "),l("p",[t._v("之前提到过，我们会使用 Mocha 作为测试运行器，Chai 作为断言库，用 Sinon.js 模拟 Todo model。首先安装单元测试环境：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-bash"},[t._v("> npm install mocha chai sinon sinon-mongoose --save")])]),l("p",[t._v("使用 "),l("code",[t._v("sinon-mongoose")]),t._v(" 模块来模拟 Mongoose 定义的 MongoDB 模型。")]),t._v(" "),l("p",[t._v("现在，引入测试的依赖：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" sinon = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'sinon'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" chai = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'chai'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expect = chai.expect;\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" mongoose = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'mongoose'")]),t._v(");\n"),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'sinon-mongoose'")]),t._v(");\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("//Importing our todo model for our unit testing.")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" Todo = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'../../app/models/todo.model'")]),t._v(");")])]),l("h3",{attrs:{id:"todo-api-"}},[t._v("Todo API 的测试用例")]),t._v(" "),l("p",[t._v("编写单元测试时，需要同时考虑成功和出错的场景。")]),t._v(" "),l("p",[t._v("对我们的 Todo API 来说，我们要给新建、删除、更新、查询 API 同时编写成功和出错的测试用例。我们使用 Mocha, Chai 和 Sinon.js 来编写测试。")]),t._v(" "),l("h4",{attrs:{id:"-todo"}},[t._v("获取所有 Todo")]),t._v(" "),l("p",[t._v("本小节，我们来编写从数据库获取所有 todo 的测试用例。需要同时为成功、出错场景编写，以确保代码在生产中的各种环境下都能正常工作。")]),t._v(" "),l("p",[t._v("我们不会使用真实数据库来跑测试用例，而是用 "),l("code",[t._v("sinon.mock")]),t._v(" 给 Todo schema 建立假数据模型，然后再测试期望的结果。")]),t._v(" "),l("p",[t._v("来使用 "),l("code",[t._v("sinon.mock")]),t._v(" 给 Todo model 据，然后使用 "),l("code",[t._v("find")]),t._v(" 方法获取数据库中存储的所有 todo。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("    describe("),l("span",{staticClass:"hljs-string"},[t._v('"Get all todos"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(")")]),t._v("{\n         "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if we get all todos")]),t._v("\n        it("),l("span",{staticClass:"hljs-string"},[t._v('"should return all todos"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock(Todo);\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = {"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("todo")]),t._v(": []};\n            TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'find'")]),t._v(").yields("),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(", expectedResult);\n            Todo.find("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n                TodoMock.verify();\n                TodoMock.restore();\n                expect(result.status).to.be.true;\n                done();\n            });\n        });\n\n        "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if we fail to get a todo")]),t._v("\n        it("),l("span",{staticClass:"hljs-string"},[t._v('"should return error"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock(Todo);\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = {"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("error")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Something went wrong"')]),t._v("};\n            TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'find'")]),t._v(").yields(expectedResult, "),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(");\n            Todo.find("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n                TodoMock.verify();\n                TodoMock.restore();\n                expect(err.status).to.not.be.true;\n                done();\n            });\n        });\n    });")])]),l("h4",{attrs:{id:"-new-todo"}},[t._v("保存 New Todo")]),t._v(" "),l("p",[t._v("保存一个新的 todo，需要用一个示例任务来模拟 Todo model。使用我们创建的Todo model来检验 mongoose 的save 方法保存 todo 到数据库的结果。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("    "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if the todo is saved")]),t._v("\n    describe("),l("span",{staticClass:"hljs-string"},[t._v('"Post a new todo"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(")")]),t._v("{\n        it("),l("span",{staticClass:"hljs-string"},[t._v('"should create new post"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock("),l("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Todo({ "),l("span",{staticClass:"hljs-attr"},[t._v("todo")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'Save new todo from mock'")]),t._v("}));\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" todo = TodoMock.object;\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = { "),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(" };\n            TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'save'")]),t._v(").yields("),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(", expectedResult);\n            todo.save("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n                TodoMock.verify();\n                TodoMock.restore();\n                expect(result.status).to.be.true;\n                done();\n            });\n        });\n        "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if the todo is not saved")]),t._v("\n        it("),l("span",{staticClass:"hljs-string"},[t._v('"should return error, if post not saved"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock("),l("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Todo({ "),l("span",{staticClass:"hljs-attr"},[t._v("todo")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'Save new todo from mock'")]),t._v("}));\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" todo = TodoMock.object;\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = { "),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(" };\n            TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'save'")]),t._v(").yields(expectedResult, "),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(");\n            todo.save("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n                TodoMock.verify();\n                TodoMock.restore();\n                expect(err.status).to.not.be.true;\n                done();\n            });\n        });\n    });")])]),l("h4",{attrs:{id:"-id-todo"}},[t._v("根据 ID 更新 Todo")]),t._v(" "),l("p",[t._v("本节我们来检验 API 的 update 功能。这和上面的例子很类似，除了我们要使用"),l("code",[t._v("withArgs")]),t._v("方法，模拟带有参数 ID 的 Todo model。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("  "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if the todo is updated based on an ID")]),t._v("\n  describe("),l("span",{staticClass:"hljs-string"},[t._v('"Update a new todo by id"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(")")]),t._v("{\n    it("),l("span",{staticClass:"hljs-string"},[t._v('"should updated a todo by id"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock("),l("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Todo({ "),l("span",{staticClass:"hljs-attr"},[t._v("completed")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v("}));\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" todo = TodoMock.object;\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = { "),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(" };\n      TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'save'")]),t._v(").withArgs({"),l("span",{staticClass:"hljs-attr"},[t._v("_id")]),t._v(": "),l("span",{staticClass:"hljs-number"},[t._v("12345")]),t._v("}).yields("),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(", expectedResult);\n      todo.save("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n        TodoMock.verify();\n        TodoMock.restore();\n        expect(result.status).to.be.true;\n        done();\n      });\n    });\n    "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if the todo is not updated based on an ID")]),t._v("\n    it("),l("span",{staticClass:"hljs-string"},[t._v('"should return error if update action is failed"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock("),l("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Todo({ "),l("span",{staticClass:"hljs-attr"},[t._v("completed")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v("}));\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" todo = TodoMock.object;\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = { "),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(" };\n      TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'save'")]),t._v(").withArgs({"),l("span",{staticClass:"hljs-attr"},[t._v("_id")]),t._v(": "),l("span",{staticClass:"hljs-number"},[t._v("12345")]),t._v("}).yields(expectedResult, "),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(");\n      todo.save("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n        TodoMock.verify();\n        TodoMock.restore();\n        expect(err.status).to.not.be.true;\n        done();\n      });\n    });\n  });")])]),l("h4",{attrs:{id:"-id-todo"}},[t._v("根据 ID 删除 Todo")]),t._v(" "),l("p",[t._v("这是 Todo API 单元测试的最后一小节。本节我们将基于给定的 ID ，使用 mongoose 的 remove 方法，测试 API 的 delete 功能。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("    "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if the todo is deleted based on an ID")]),t._v("\n    describe("),l("span",{staticClass:"hljs-string"},[t._v('"Delete a todo by id"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(")")]),t._v("{\n        it("),l("span",{staticClass:"hljs-string"},[t._v('"should delete a todo by id"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock(Todo);\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = { "),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(" };\n            TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'remove'")]),t._v(").withArgs({"),l("span",{staticClass:"hljs-attr"},[t._v("_id")]),t._v(": "),l("span",{staticClass:"hljs-number"},[t._v("12345")]),t._v("}).yields("),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(", expectedResult);\n            Todo.remove({"),l("span",{staticClass:"hljs-attr"},[t._v("_id")]),t._v(": "),l("span",{staticClass:"hljs-number"},[t._v("12345")]),t._v("}, "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n                TodoMock.verify();\n                TodoMock.restore();\n                expect(result.status).to.be.true;\n                done();\n            });\n        });\n        "),l("span",{staticClass:"hljs-comment"},[t._v("// Test will pass if the todo is not deleted based on an ID")]),t._v("\n        it("),l("span",{staticClass:"hljs-string"},[t._v('"should return error if delete action is failed"')]),t._v(", "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("done")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoMock = sinon.mock(Todo);\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" expectedResult = { "),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(" };\n            TodoMock.expects("),l("span",{staticClass:"hljs-string"},[t._v("'remove'")]),t._v(").withArgs({"),l("span",{staticClass:"hljs-attr"},[t._v("_id")]),t._v(": "),l("span",{staticClass:"hljs-number"},[t._v("12345")]),t._v("}).yields(expectedResult, "),l("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(");\n            Todo.remove({"),l("span",{staticClass:"hljs-attr"},[t._v("_id")]),t._v(": "),l("span",{staticClass:"hljs-number"},[t._v("12345")]),t._v("}, "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v("err, result")]),t._v(") ")]),t._v("{\n                TodoMock.verify();\n                TodoMock.restore();\n                expect(err.status).to.not.be.true;\n                done();\n            });\n        });\n    });")])]),l("p",[t._v("每次我们都要还原（restore） Todomock，确保下次它还能正常工作。")]),t._v(" "),l("p",[t._v("每次运行测试用例的时候，所有的都会失败，因为我们的生产代码还没写好呢。我们会运行自动化测试，直至所有单元测试都通过。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-bash"},[t._v("> npm "),l("span",{staticClass:"hljs-built_in"},[t._v("test")]),t._v("\n\n  Unit "),l("span",{staticClass:"hljs-built_in"},[t._v("test")]),t._v(" "),l("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" Todo API\n    Get all todo\n      1) should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" all todo\n      2) should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error\n    Post a new todo\n      3) should create new post\n      4) should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error, "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" post not saved\n    Update a new todo by id\n      5) should updated a todo by id\n      6) should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" update action is failed\n    Delete a todo by id\n      7) should delete a todo by id\n      8) should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" delete action is failed\n\n  0 passing (17ms)\n  8 failing")])]),l("p",[t._v("你在命令行终端上运行"),l("code",[t._v("npm test")]),t._v("的时候，会得到上面的输出信息，所有的测试用例都失败了。需要根据需求和单元测试用例来编写应用逻辑，使我们的程序更加稳定。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("编写应用逻辑")]),t._v(" "),l("p",[t._v("下一步就是为 Todo API 编写真正的应用代码。我们会运行自动测试用例，一直重构，直到所有单元测试都通过。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("配置路由")]),t._v(" "),l("p",[t._v("对客户端和服务端的 web 应用来说，路由配置是最重要的一部分。在我们的应用中，使用 Express Router 的实例来处理所有路由。来给我们的应用创建路由。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" express = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'express'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" router = express.Router();\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" Todo = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'../models/todo.model'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoController = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'../controllers/todo.controller'")]),t._v(")(Todo);\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("// Get all Todo")]),t._v("\nrouter.get("),l("span",{staticClass:"hljs-string"},[t._v("'/todo'")]),t._v(", TodoController.GetTodo);\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("// Create new Todo")]),t._v("\nrouter.post("),l("span",{staticClass:"hljs-string"},[t._v("'/todo'")]),t._v(", TodoController.PostTodo);\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("// Delete a todo based on :id")]),t._v("\nrouter.delete("),l("span",{staticClass:"hljs-string"},[t._v("'/todo/:id'")]),t._v(", TodoController.DeleteTodo);\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("// Update a todo based on :id")]),t._v("\nrouter.put("),l("span",{staticClass:"hljs-string"},[t._v("'/todo/:id'")]),t._v(", TodoController.UpdateTodo);\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("module")]),t._v(".exports = router;")])]),l("h3",{attrs:{id:"controller-"}},[t._v("Controller（控制器）")]),t._v(" "),l("p",[t._v("现在我们差不多在教程的最后阶段了，开始来写控制器代码。在典型的 web 应用里，controller 控制着保存、检索数据的主要逻辑，还要做验证。来写Todo API 真正的控制器，运行自动化单元测试直至测试用例全部通过。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("    "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" Todo = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'../models/todo.model'")]),t._v(");\n\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" TodoCtrl = {\n        "),l("span",{staticClass:"hljs-comment"},[t._v("// Get all todos from the Database")]),t._v("\n        GetTodo: "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("req, res")]),t._v(")")]),t._v("{\n            Todo.find({}, "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err, todos")]),t._v(")")]),t._v("{\n              "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(err) {\n                res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("error")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Something went wrong"')]),t._v("});\n                "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(";\n              }\n              res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("todo")]),t._v(": todos});\n            });\n        },\n        "),l("span",{staticClass:"hljs-comment"},[t._v("//Post a todo into Database")]),t._v("\n        PostTodo: "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("req, res")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" todo = "),l("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Todo(req.body);\n            todo.save("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err, todo")]),t._v(")")]),t._v("{\n              "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(err) {\n                res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("error")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Something went wrong"')]),t._v("});\n                "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(";\n              }\n              res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("message")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Todo Saved!!"')]),t._v("});\n            });\n        },\n        "),l("span",{staticClass:"hljs-comment"},[t._v("//Updating a todo status based on an ID")]),t._v("\n        UpdateTodo: "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("req, res")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" completed = req.body.completed;\n            Todo.findById(req.params.id, "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err, todo")]),t._v(")")]),t._v("{\n            todo.completed = completed;\n            todo.save("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err, todo")]),t._v(")")]),t._v("{\n              "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(err) {\n                res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("error")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Status not updated"')]),t._v("});\n              }\n              res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("message")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Status updated successfully"')]),t._v("});\n            });\n            });\n        },\n        "),l("span",{staticClass:"hljs-comment"},[t._v("// Deleting a todo baed on an ID")]),t._v("\n        DeleteTodo: "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("req, res")]),t._v(")")]),t._v("{\n          Todo.remove({"),l("span",{staticClass:"hljs-attr"},[t._v("_id")]),t._v(": req.params.id}, "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err, todos")]),t._v(")")]),t._v("{\n            "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(err) {\n              res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("error")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Deleting todo is not successfull"')]),t._v("});\n              "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(";\n            }\n            res.json({"),l("span",{staticClass:"hljs-attr"},[t._v("status")]),t._v(": "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("message")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v('"Todo deleted successfully!!"')]),t._v("});\n          });\n        }\n    }\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("module")]),t._v(".exports = TodoCtrl;")])]),l("h2",{attrs:{id:"-"}},[t._v("运行测试用例")]),t._v(" "),l("p",[t._v("现在我们完成了应用的测试用例和控制器逻辑两部分。来跑一下测试，看看最终结果：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-bash"},[t._v("> npm "),l("span",{staticClass:"hljs-built_in"},[t._v("test")]),t._v("\n  Unit "),l("span",{staticClass:"hljs-built_in"},[t._v("test")]),t._v(" "),l("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" Todo API\n    Get all todo\n      ✓ should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" all todo\n      ✓ should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error\n    Post a new todo\n      ✓ should create new post\n      ✓ should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error, "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" post not saved\n    Update a new todo by id\n      ✓ should updated a todo by id\n      ✓ should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" update action is failed\n    Delete a todo by id\n      ✓ should delete a todo by id\n      ✓ should "),l("span",{staticClass:"hljs-built_in"},[t._v("return")]),t._v(" error "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" delete action is failed\n\n  8 passing (34ms)")])]),l("p",[t._v("最终结果显示，我们所有的测试用例都通过了。接下来的步骤应该是 API 重构，这包含着重复本教程提到的相同过程。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("结论")]),t._v(" "),l("p",[t._v("通过本教程，我们学习了如果使用测试驱动开发的办法，用 Node.js and MongoDB 设计 API。尽管 TDD （测试驱动开发）给开发过程带来了额外复杂度，它能帮我们建立更稳定的、错误更少的应用。就算你不想实践 TDD， 至少也应该编写覆盖应用所有功能点的测试。")]),t._v(" "),l("p",[t._v("如果你有任何问题或想法，请不吝留言。")])])},[],!1,null,null,null);n.default=component.exports}}]);