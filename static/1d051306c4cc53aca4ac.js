(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{205:function(t,n,l){"use strict";l.r(n);var v={computed:{data:function(){return{title:"[译] JavaScript  与函数式编程",description:"JavaScript  与函数式编程",keywords:"翻译,函数式编程,JavaScript",pathname:"JavaScript-and-Functional-Programming",translation:{author:"Beth Allchurch",social:"https://www.twitter.com/BethAllchurch",from:"https://bethallchurch.github.io/JavaScript-and-Functional-Programming/"},create_time:"2016-08-10",prev:{title:"[译] 自动化、跨浏览器的 JavaScript 单元测试",pathname:"set-up-automated-cross-browser-javascript-unit-testing"},next:{title:"[译] eBay：style & speed",pathname:"browse-ebay-with-style-and-speed-ebay"}}}}},_=l(3),component=Object(_.a)(v,function(){var t=this,n=t.$createElement,l=t._self._c||n;return l("post",{attrs:{data:t.data}},[l("blockquote",[l("p",[l("strong",[t._v("译者注：推荐一篇译文，"),l("a",{attrs:{href:"http://pinggod.com/2016/函数式编程术语解析",target:"_blank"}},[t._v("《函数式编程术语解析》")]),t._v("。")])])]),t._v(" "),l("p",[l("em",[t._v("本文是我在 2016 年 7 月 29 号听 Kyle Simpson 精彩的课程"),l("strong",[t._v("《Functional-Light JavaScript》")]),t._v("时所做的笔记（外加个人的深入研究）（"),l("a",{attrs:{href:"https://speakerdeck.com/getify/functional-light-javascript",target:"_blank"}},[t._v("幻灯片在这")]),t._v("）。")])]),t._v(" "),l("p",[t._v("长久以来，面向对象在 JavaScript 编程范式中占据着主导地位。不过，最近人们对函数式编程的兴趣正在增长。函数式编程是一种编程风格，它强调将程序状态变化（即"),l("em",[t._v("副作用[side effect]")]),t._v("）的次数减到最小。因此，函数式编程鼓励使用"),l("em",[t._v("不可变")]),t._v("数据（immutable data）和纯函数（pure functions）（“纯”意味着没有副作用的）。它也更倾向于使用"),l("em",[t._v("声明式")]),t._v("的风格，鼓励使用命名良好的函数，这样就能使用在我们视线之外的那些打包好的细节实现，通过描述希望发生什么以进行编码。")]),t._v(" "),l("p",[t._v("尽管面向对象编程与函数式编程之间有些矛盾，它们却并非互斥的关系。JavaScript 所拥有的工具，能支持这两种方式。甚至可以说，就算不把它孤立地当作函数式语言使用，还是有不少来自函数式方法的概念和最佳实践可以帮助我们，让代码更干净，可读性更强，推理起来更简单。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("副作用最小化")]),t._v(" "),l("p",[t._v("所谓"),l("em",[t._v("副作用")]),t._v("，指的是函数内部产生了超出函数之外的变化。函数可能会做一些事，如操作 DOM、修改更高层作用域中的变量值，或者将数据写入数据库。这些带来的就是副作用。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// 有副作用的函数")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" x = "),l("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(";\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" myFunc = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" y ")]),t._v(") ")]),t._v("{\n  x = x + y;\n};\n\nmyFunc( "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" );\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( x ); "),l("span",{staticClass:"hljs-comment"},[t._v("// 13")]),t._v("\n\nmyFunc( "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" );\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( x ); "),l("span",{staticClass:"hljs-comment"},[t._v("// 16")])])]),l("p",[t._v("副作用并非天生邪恶。不产生任何副作用的程序也无法影响世界，因此也没有任何意义（除非是作为理论兴趣进行研究）。不过，副作用确实是危险的，应当尽量避免使用，除非绝对必要。")]),t._v(" "),l("p",[t._v("当函数产生副作用的时候，仅凭借输入输出的内容，不足以明确函数究竟做了什么工作。必须了解上下文环境、程序状态的历史，这让函数更难理解。在不可预测的交互方式下，副作用可能带来一些 bug，且函数因上述依赖，测试起来也更困难。")]),t._v(" "),l("p",[t._v("副作用最小化是函数式编程中最基础的原则，接下来的多数小节都可以当作是避免副作用的一些办法概要。")]),t._v(" "),l("h2",{attrs:{id:"-immutable-"}},[t._v("视数据为不可变（Immutable）")]),t._v(" "),l("p",[t._v("变动（mutation）指的是值在原位置上的变化（an in-place change to a value）。不可变值意味着，一旦创建出来，永远都不会变化。在 JavaScript 中，简单值如数字、字符串、布尔值这些是不可变的。不过，像对象、数组这样的数据结构都是可变的。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// push 方法改变了数组")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" x = ["),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v("];\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( x ); "),l("span",{staticClass:"hljs-comment"},[t._v("// [1, 2]")]),t._v("\n\nx.push( "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" );\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( x ); "),l("span",{staticClass:"hljs-comment"},[t._v("// [1, 2, 3]")])])]),l("p",[t._v("为什么要避免变动数据呢？")]),t._v(" "),l("p",[t._v("变动是一种副作用。程序中变化的东西越少，需要跟踪记录的也就越少，程序也就越简单。")]),t._v(" "),l("p",[t._v("JavaScript 中维持对象、数组等数据结构不可变性的可用工具很有限。通过 "),l("code",[t._v("Object.freeze")]),t._v(" 可以强制实现对象的不可变，但作用深度只有一层：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" frozenObject = "),l("span",{staticClass:"hljs-built_in"},[t._v("Object")]),t._v(".freeze( { "),l("span",{staticClass:"hljs-attr"},[t._v("valueOne")]),t._v(" : "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", "),l("span",{staticClass:"hljs-attr"},[t._v("valueTwo")]),t._v(" : { "),l("span",{staticClass:"hljs-attr"},[t._v("nestedValue")]),t._v(" : "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(" } } );\nfrozenObject.valueOne = "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v("; "),l("span",{staticClass:"hljs-comment"},[t._v("// 不允许")]),t._v("\nfrozenObject.valueTwo.nestedValue = "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v("; "),l("span",{staticClass:"hljs-comment"},[t._v("// 竟然允许了!")])])]),l("p",[t._v("不过，还是有一些很棒的工具库解决了这些问题，其中最著名的要数 "),l("a",{attrs:{href:"https://facebook.github.io/immutable-js/",target:"_blank"}},[t._v("Immutable")]),t._v(" 了。")]),t._v(" "),l("p",[t._v("对多数应用来说，使用工具库来保证不可变性有些矫枉过正。很多情况下，简单地将数据当作是不可变的，就能让我们受益良多。")]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("避免变动：数组")]),t._v(" "),l("p",[t._v("JavaScript 数组方法可以被概括为"),l("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Mutator_methods",target:"_blank"}},[t._v("变动方法 (mutator methods) ")]),t._v("和非变动方法。应当尽可能避免变动方法。")]),t._v(" "),l("p",[t._v("举例来说，"),l("code",[t._v("concat")]),t._v(" 方法可以用来替代 "),l("code",[t._v("push")]),t._v(" 方法。"),l("code",[t._v("push")]),t._v(" 改变了原数组；"),l("code",[t._v("concat")]),t._v(" 返回由原数组和作为参数的数组组成的新数组，而原来的数组还是完整的。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// push 改变了数组")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" arrayOne = ["),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v("];\narrayOne.push( "),l("span",{staticClass:"hljs-number"},[t._v("4")]),t._v(" );\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( arrayOne ); "),l("span",{staticClass:"hljs-comment"},[t._v("// [1, 2, 3, 4]")]),t._v("\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("// concat 生成了新数组，原数组保持不变")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" arrayTwo = ["),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v("];\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" arrayThree = arrayTwo.concat([ "),l("span",{staticClass:"hljs-number"},[t._v("4")]),t._v(" ]);\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( arrayTwo ); "),l("span",{staticClass:"hljs-comment"},[t._v("// [1, 2, 3]")]),t._v("\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( arrayThree ); "),l("span",{staticClass:"hljs-comment"},[t._v("// [1, 2, 3, 4]")])])]),l("p",[t._v("还有一些非变动方法，包括 "),l("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank"}},[l("code",[t._v("map")])]),t._v("、"),l("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank"}},[l("code",[t._v("filter")])]),t._v("、"),l("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",target:"_blank"}},[l("code",[t._v("reduce")])]),t._v(" 等。")]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("避免变动：对象")]),t._v(" "),l("p",[t._v("可以使用 "),l("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank"}},[l("code",[t._v("Object.assign")])]),t._v(" 方法，而非直接编辑对象。该方法将源对象的属性复制到目标对象中，并将目标对象返回。如果总是用一个空对象作为目标对象，就能通过 "),l("code",[t._v("Object.assign")]),t._v(" 避免直接编辑对象。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" objectOne = { "),l("span",{staticClass:"hljs-attr"},[t._v("valueOne")]),t._v(" : "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(" };\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" objectTwo = { "),l("span",{staticClass:"hljs-attr"},[t._v("valueTwo")]),t._v(" : "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(" };\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" objectThree = "),l("span",{staticClass:"hljs-built_in"},[t._v("Object")]),t._v(".assign( {}, objectOne, objectTwo );\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( objectThree ); "),l("span",{staticClass:"hljs-comment"},[t._v("// { valueOne : 1, valueTwo : 2 }")])])]),l("h3",{attrs:{id:"-const-"}},[t._v("关于 "),l("code",[t._v("const")])]),t._v(" "),l("p",[l("code",[t._v("const")]),t._v(" 很有用，却不会使数据不可变。它只能防止变量被重新赋值。这不能混为一谈。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" x = "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(";\nx = "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v("; "),l("span",{staticClass:"hljs-comment"},[t._v("// 不允许")]),t._v("\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" myArray = ["),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v("];\nmyArray = ["),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v("]; "),l("span",{staticClass:"hljs-comment"},[t._v("// 不允许")]),t._v("\n\nmyArray["),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("] = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; "),l("span",{staticClass:"hljs-comment"},[t._v("// 允许了!")])])]),l("h2",{attrs:{id:"-"}},[t._v("书写纯函数")]),t._v(" "),l("p",[l("em",[t._v("纯函数")]),t._v(" 不会改变程序的状态，也不会产生可感知的副作用。纯函数的输出，仅仅取决于输入值。无论何时何地被调用，只要输入值相同，返回值也就一样。")]),t._v(" "),l("p",[t._v("纯函数是最小化副作用的重要工具。另外，与上下文无关的特点，也让它们有了高可测试性和可复用性。")]),t._v(" "),l("p",[t._v("前面讲副作用的小节中的代码里， "),l("code",[t._v("myFunc")]),t._v(" 函数就是非纯函数，注意两次调用时输入相同但每次返回结果却不同。不过，它也能改写成纯函数：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// 将全局变量变为局部变量")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" myFunc = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" y ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" x = "),l("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(";\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x + y;\n}\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(myFunc( "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 13")]),t._v("\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(myFunc( "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 13")])])]),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// 将 x 作为参数传递")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" x = "),l("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(";\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" myFunc = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x + y;\n}\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(myFunc( x, "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 13")]),t._v("\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(myFunc( x, "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 13")])])]),l("p",[t._v("你的程序最终肯定还是会产生一些副作用。当副作用产生的时候，小心应对，尽可能地约束、限制它们的影响。")]),t._v(" "),l("h2",{attrs:{id:"-function-generating-functions-"}},[t._v("书写返回函数的函数（Function-Generating Functions）")]),t._v(" "),l("p",[t._v("找一些程经验的人，让他们猜猜下面的代码做了什么：")]),t._v(" "),l("p",[t._v("例 1")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" numbers = ["),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v("];\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ( "),l("span",{staticClass:"hljs-keyword"},[t._v("let")]),t._v(" i = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < numbers.length; i++ ) {\n  "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( numbers[i] );\n}")])]),l("p",[t._v("例 2")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" numbers = ["),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v("];\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" print = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" input ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log( input );\n};\n\nnumbers.forEach( print );")])]),l("p",[t._v("我测试过的所有人在例 2 上运气更好。例 1 展示的是"),l("em",[t._v("命令式")]),t._v("方法，将一列数字打印出来。例 2 展示的是"),l("em",[t._v("声明式")]),t._v("方法。将循环遍历数组、在控制台打印数字这些细节各种包装成 "),l("code",[t._v("forEach")]),t._v(" 和 "),l("code",[t._v("print")]),t._v(" 函数，无需知道"),l("em",[t._v("如何做")]),t._v("，就可以表达我们需要程序"),l("em",[t._v("做什么")]),t._v("。这让代码可读性更高。例 2 的最后一行看起来，很接近英语句子。")]),t._v(" "),l("p",[t._v("采用这种方法，涉及到编写大量函数。利用现有函数编写生成新函数的函数，可以让这个过程中的重复（"),l("a",{attrs:{href:"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",target:"_blank"}},[t._v("DRY")]),t._v("-er）更少。")]),t._v(" "),l("p",[t._v("特别地，JavaScript 的两个特性让这种形式的函数生成变得可能。第一个是"),l("em",[t._v("闭包")]),t._v("。函数能够访问包含作用域中的变量，就算该作用域已不复存在，这就是闭包。第二个特性是，JavaScript 将函数当作值来对待。这使书写高阶函数成为可能，高阶函数可以接收函数作为参数，并/或返回函数。")]),t._v(" "),l("p",[t._v("这些特性组合在一起，我们就可以编写返回函数的函数了。返回的函数能“记住”传给生成函数的参数，并在程序的其他地方使用这些参数。")]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("函数组合")]),t._v(" "),l("p",[t._v("通过"),l("em",[t._v("函数组合")]),t._v("，可能将函数组合在一起形成新的函数。一起来看例子：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// 通过 add 和 square 函数组合生成 addThenSquare")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" add = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x + y;\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" square = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x * x;\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" addThenSquare = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" square(add( x, y ));\n};")])]),l("p",[t._v("你可能会发现一直在重复这种利用更小的函数生成一个更复杂的函数的形式。通常编写一个组合函数会更有效率：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" add = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x + y;\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" square = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x * x;\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" composeTwo = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" f, g ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y ")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" g( f ( x, y ) );\n  };\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" addThenSquare = composeTwo( add, square );")])]),l("p",[t._v("还可以走得更远，编写一个更一般化的组合函数：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// 这个版本的 composeTwo 的初始化函数可以接收任意数量的参数")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" composeTwo = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" f, g ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" ...args ")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" g( f( ...args ) );\n  };\n};\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("// composeMany 可以接收任意数量的函数")]),t._v("\n"),l("span",{staticClass:"hljs-comment"},[t._v("// 其初始化函数能接收任意数量的参数")]),t._v("\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" composeMany = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" ...args ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" funcs = args;\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" ...args ")]),t._v(") ")]),t._v("{\n    funcs.forEach("),l("span",{staticClass:"hljs-function"},[t._v("("),l("span",{staticClass:"hljs-params"},[t._v(" func ")]),t._v(") =>")]),t._v(" {\n      args = [func.apply( "),l("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(", args )]; \n    });\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" args["),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("];\n  };\n};")])]),l("p",[t._v("组合函数的最终形式取决于你所需的通用性水平，以及偏好的 API 类型。")]),t._v(" "),l("h3",{attrs:{id:"-partial-application-"}},[t._v("偏函数（Partial Application）")]),t._v(" "),l("p",[l("em",[t._v("Partial 函数应用")]),t._v(" 指定函数参数中的一个或多个，然后返回一个稍后会被完整调用的函数。")]),t._v(" "),l("p",[t._v("在下面的例子中，"),l("code",[t._v("double")]),t._v("、"),l("code",[t._v("triple")]),t._v(" 和 "),l("code",[t._v("quadruple")]),t._v(" 都是 "),l("code",[t._v("multiply")]),t._v(" 函数的 partial 应用。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" multiply = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x * y;\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" partApply = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" fn, x ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" y ")]),t._v(") ")]),t._v("{\n    fn( x, y );\n  };\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" double = partApply( multiply, "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(" );\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" triple = partApply( multiply, "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" );\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" quadruple = partApply( multiply, "),l("span",{staticClass:"hljs-number"},[t._v("4")]),t._v(" );")])]),l("h3",{attrs:{id:"-"}},[t._v("柯里化")]),t._v(" "),l("p",[l("em",[t._v("柯里化")]),t._v("是将接收多个参数的函数转换为一系列只接收一个参数的函数的过程。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" multiply = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x * y;\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" curry = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" fn ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x ")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" y ")]),t._v(") ")]),t._v("{\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fn( x, y );\n    };\n  };\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" curriedMultiply = curry( multiply );\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" double = curriedMultiply( "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(" );\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" triple = curriedMultiply( "),l("span",{staticClass:"hljs-number"},[t._v("3")]),t._v(" );\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" quadruple = curriedMultiply( "),l("span",{staticClass:"hljs-number"},[t._v("4")]),t._v(" );\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(triple( "),l("span",{staticClass:"hljs-number"},[t._v("6")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 18")])])]),l("p",[t._v("柯里化和 partial 应用在概念上很相似（可能不会两个都需要使用），但仍然有所不同。主要区别在于，柯里化总是生成函数套链，每次只接收一个参数，而 partial 应用返回的函数可以一次接收多个参数。 比较它们作用于最少接收三个参数的函数时，这种差别就更明晰了：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" multiply = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x, y, z ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" x * y * z;\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" curry = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" fn ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" x ")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" y ")]),t._v(") ")]),t._v("{\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" z ")]),t._v(") ")]),t._v("{\n        "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fn( x, y, z );\n      };\n    };\n  };\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" partApply = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" fn, x ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" y, z ")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fn( x, y, z );\n  };\n};\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" curriedMultiply = curry( multiply );\n"),l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" partiallyAppliedMultiply = partApply( multiply, "),l("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(" );\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(curriedMultiply( "),l("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(" )( "),l("span",{staticClass:"hljs-number"},[t._v("5")]),t._v(" )( "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 100")]),t._v("\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(partiallyAppliedMultiply( "),l("span",{staticClass:"hljs-number"},[t._v("5")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("2")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 100")])])]),l("h2",{attrs:{id:"-"}},[t._v("递归")]),t._v(" "),l("p",[l("em",[t._v("递归")]),t._v("函数是这样一种函数，它会一直调用自身，直至满足基本条件。递归函数是高度声明式的。它们也很优雅，写起来很爽！")]),t._v(" "),l("p",[t._v("下面是计算递归计算阶乘的例子：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" factorial = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" n ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" ( n === "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(" ) {\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(";\n  }\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" n * factorial( n - "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(" );\n};\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(factorial( "),l("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 3628800")])])]),l("p",[t._v("在 JavaScript 中使用递归函数需要细心一些。每次函数调用都会向调用栈（call stack）中加入新的调用帧（call frame），当函数返回的时候，该调用帧从调用栈中弹出。递归函数调用在返回之前调用自身，所以很容易就会超出调用栈的限制，导致程序崩溃。")]),t._v(" "),l("p",[t._v("不过，这可以通过"),l("em",[t._v("尾调用优化")]),t._v("来避免。")]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("尾调用优化")]),t._v(" "),l("p",[t._v("尾调用指的是，某个函数的最后一步动作是调用函数。尾调用优化指的是，当语言编译器识别到尾调用的时候，会对其复用相同的调用帧。这意味着，在编写尾调用的递归函数时，调用帧的限制永远不会被超出，因为调用帧会被反复使用。")]),t._v(" "),l("p",[t._v("下面是将前面的递归函数采用尾递归优化重写之后的例子:")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" factorial = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" ("),l("span",{staticClass:"hljs-params"},[t._v(" n, base ")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" ( n === "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(" ) {\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" base;\n  }\n  base *= n;\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" factorial( n - "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(", base );\n};\n\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(factorial( "),l("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(", "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(" )); "),l("span",{staticClass:"hljs-comment"},[t._v("// 3628800")])])]),l("p",[l("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-tail-position-calls",target:"_blank"}},[t._v("ES2015 语言规范")]),t._v("中已包含了适当的尾部调用的支持，但目前在大部分环境中尚未得到支持。可以在"),l("a",{attrs:{href:"https://kangax.github.io/compat-table/es6/",target:"_blank"}},[t._v("这里")]),t._v("查看你能否使用。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("小结")]),t._v(" "),l("p",[t._v("函数式编程容纳了许多思想，借助它们可以优化代码。纯函数和不可变数据将副作用的危害最小化，声明式编程让代码可读性大大提高。在与复杂性的斗争中，这些是我们应当拥抱的重要工具。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("资源")]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("概述性")]),t._v(" "),l("ul",[l("li",[l("p",[l("a",{attrs:{href:"https://www.sitepoint.com/series/introduction-functional-javascript/",target:"_blank"}},[t._v("SitePoint: An Introduction to Functional JavaScript")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://www.cs.utexas.edu/~shmat/courses/cs345/whyfp.pdf",target:"_blank"}},[t._v("John Hughes: Why Functional Programming Matters")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://www.vasinov.com/blog/16-months-of-functional-programming/",target:"_blank"}},[t._v("Vasily Vasinov: 16 Months of Functional Programming")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://stephen-young.me.uk/2013/01/20/functional-programming-with-javascript.html",target:"_blank"}},[t._v("Stephen Young: Functional programming with Javascript")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-intro/",target:"_blank"}},[t._v("James Sinclair: A Gentle Introduction to Functional JavaScript")])])])]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("副作用")]),t._v(" "),l("ul",[l("li",[l("p",[l("a",{attrs:{href:"https://en.wikipedia.org/wiki/Side_effect_(computer_science",target:"_blank"}},[t._v("Wikipedia: Side effect (computer science)")]),t._v(")")])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://stackoverflow.com/questions/763835/are-side-effects-a-good-thing",target:"_blank"}},[t._v("Stack Overflow: Are side effects a good thing?")])])])]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("不可变性")]),t._v(" "),l("ul",[l("li",[l("p",[l("a",{attrs:{href:"https://www.sitepoint.com/immutability-javascript/",target:"_blank"}},[t._v("Site Point: Immutability in JavaScript")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"https://auth0.com/blog/2016/03/23/intro-to-immutable-js/",target:"_blank"}},[t._v("Auth0: Introduction to Immutable.js and Functional Programming Concepts")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://programmers.stackexchange.com/questions/151733/if-immutable-objects-are-good-why-do-people-keep-creating-mutable-objects",target:"_blank"}},[t._v("Stack Exchange: If immutable objects are good, why do people keep creating mutable objects?")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://stackoverflow.com/questions/34385243/why-is-immutability-so-importantor-needed-in-javascript",target:"_blank"}},[t._v("Stack Overflow: Why is immutability so important(or needed) in javascript?")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://www.youtube.com/watch?v=I7IdS-PbEgI&t=14m8s",target:"_blank"}},[t._v("React.js Conf 2015 - Immutable Data and React (video)")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"https://egghead.io/lessons/javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread",target:"_blank"}},[t._v("Redux: Avoiding Array Mutations with concat(), slice(), and …spread (video)")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"https://egghead.io/lessons/javascript-redux-avoiding-object-mutations-with-object-assign-and-spread",target:"_blank"}},[t._v("Redux: Avoiding Object Mutations with Object.assign() and …spread (video)")])])])]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("纯函数")]),t._v(" "),l("ul",[l("li",[l("a",{attrs:{href:"https://egghead.io/lessons/javascript-redux-pure-and-impure-functions",target:"_blank"}},[t._v("Redux: Pure and Impure Functions")])])]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("函数生成")]),t._v(" "),l("ul",[l("li",[l("p",[l("a",{attrs:{href:"http://eloquentjavascript.net/05_higher_order.html",target:"_blank"}},[t._v("Eloquent JavaScript: Higher-Order Functions")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://scott.sauyet.com/Javascript/Talk/Compose/2013-05-22/#slide-0",target:"_blank"}},[t._v("Scott Sauyet: Compose Yourself: Fun with Functions")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://www.vasinov.com/blog/on-currying-and-partial-function-application/",target:"_blank"}},[t._v("Vasily Vasinov: On Currying and Partial Function Application")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://www.2ality.com/2011/09/currying-vs-part-eval.html",target:"_blank"}},[t._v("2ality: Currying versus partial application")])])])]),t._v(" "),l("h3",{attrs:{id:"-"}},[t._v("递归")]),t._v(" "),l("ul",[l("li",[l("p",[l("a",{attrs:{href:"http://stackoverflow.com/questions/3021/what-is-recursion-and-when-should-i-use-it",target:"_blank"}},[t._v("Stack Overflow: What is recursion and when should I use it?")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"https://medium.com/functional-javascript/recursion-282a6abbf3c5#.i913o81g3",target:"_blank"}},[t._v("Medium: Recursion")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://benignbemine.github.io/2015/07/19/es6-tail-calls/",target:"_blank"}},[t._v("Kyle Owen: ES6 Tail Call Optimization Explained")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"https://taylodl.wordpress.com/2013/06/07/functional-javascript-tail-call-optimization-and-trampolines/",target:"_blank"}},[t._v("Don Taylor: Functional JavaScript – Tail Call Optimization and Trampolines")])])]),t._v(" "),l("li",[l("p",[l("a",{attrs:{href:"http://www.integralist.co.uk/posts/js-recursion.html",target:"_blank"}},[t._v("Mark McDonnell: Understanding recursion in functional JavaScript programming")])])])])])},[],!1,null,null,null);n.default=component.exports}}]);