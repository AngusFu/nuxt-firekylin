(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{253:function(t,v,_){"use strict";_.r(v);var n={computed:{data:function(){return{title:"[译] 小两百行 JavaScript 打造 lambda 演算解释器",description:"小两百行 JavaScript 打造lambda 演算解释器",keywords:"翻译,JavaScript",pathname:"writing-a-lambda-calculus-interpreter-in-javascript",translation:{author:"Tadeu Zagallo",social:"http://tadeuzagallo.com/blog/about/",from:"http://tadeuzagallo.com/blog/writing-a-lambda-calculus-interpreter-in-javascript/"},create_time:"2016-06-27",prev:{title:"[译] 无限滚动加载最佳实践",pathname:"infinite-scrolling-best-practices"},next:{title:"关于JavaScript 函数传参",pathname:"javascript-argument"}}}}},l=_(3),component=Object(l.a)(n,function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("post",{attrs:{data:t.data}},[_("p",[t._v("最近，我发了一条"),_("a",{attrs:{href:"https://twitter.com/tadeuzagallo/status/742836038264098817",target:"_blank"}},[t._v("推特")]),t._v("，我喜欢上 lambda 演算了，它简单、强大。")]),t._v(" "),_("p",[t._v("我当然听说过 lambda 演算，但直到我读了这本书 "),_("a",{attrs:{href:"https://www.cis.upenn.edu/~bcpierce/tapl",target:"_blank"}},[t._v("《类型和编程语言》（Types and Programming Languages）")]),t._v(" 我才体会到其中美妙。")]),t._v(" "),_("p",[t._v("已经有许多编译器/解析器/解释器（compiler / parser / interpreter）的教程，但大多数不会引导你完整实现一种语言，因为实现完全的语言语义，通常需要很多工作。不过在本文中， lambda 演算（译者注：又写作“λ 演算”，为统一行文，下文一律作 “lambda 演算”）是如此简单，我们可以搞定一切！")]),t._v(" "),_("p",[t._v("首先，什么是 lambda 演算呢？"),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Lambda_calculus",target:"_blank"}},[t._v("维基百科")]),t._v("是这样描述的:")]),t._v(" "),_("blockquote",[_("p",[t._v("lambda 演算（又写作 “λ 演算”）是表达基于功能抽象和使用变量绑定和替代的应用计算数学逻辑形式系统。这是一个通用的计算模型，可以用来模拟单带图灵机，在 20 世纪 30 年代，由数学家奥隆索·乔奇第一次引入，作为数学基础的调查的一部分。")])]),t._v(" "),_("p",[t._v("这是一个非常简单的 lambda 演算程序的模样：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-haskell"},[t._v("(λx. λy. x) (λy. y) (λx. x)")])]),_("p",[t._v("lambda 演算中只有两个结构，函数抽象（也就是函数声明）和应用（即函数调用），然而可以拿它做任何计算。")]),t._v(" "),_("h2",{attrs:{id:"1-"}},[t._v("1. 语法")]),t._v(" "),_("p",[t._v("编写解析器之前，我们需要知道的第一件事是我们将要解析的语言的语法是什么，这是 "),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form",target:"_blank"}},[t._v("BNF")]),t._v("（译者注：Backus–Naur Form，巴科斯范式， 上下文无关的语法的标记技术） 表达式：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("Term ::= Application\n        | LAMBDA LCID DOT Term\n\nApplication ::= Application Atom\n               | Atom\n\nAtom ::= LPAREN Term RPAREN\n        | LCID")])]),_("p",[t._v("语法告诉我们如何在分析过程中寻找 token 。但是等一下，token 是什么鬼？")]),t._v(" "),_("h2",{attrs:{id:"2-tokens"}},[t._v("2. Tokens")]),t._v(" "),_("p",[t._v("正如你可能已经知道的，解析器不会操作源代码。在开始解析之前，先通过 "),_("code",[t._v("词法分析器（lexer）")]),t._v(" 运行源码，这会将源码打散成 token（语法中全大写的部分）。我们可以从上面的语法中提取的如下的 token ：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("LPAREN: "),_("span",{staticClass:"hljs-string"},[t._v("'('")]),t._v("\nRPAREN: "),_("span",{staticClass:"hljs-string"},[t._v("')'")]),t._v("\nLAMBDA: "),_("span",{staticClass:"hljs-string"},[t._v("'λ'")]),t._v(" "),_("span",{staticClass:"hljs-comment"},[t._v("// 为了方便也可以使用 “\\”")]),t._v("\nDOT: "),_("span",{staticClass:"hljs-string"},[t._v("'.'")]),t._v("\nLCID: "),_("span",{staticClass:"hljs-regexp"},[t._v("/[a-z][a-zA-Z]*/")]),t._v(" "),_("span",{staticClass:"hljs-comment"},[t._v("// LCID 表示小写标识符")]),t._v("\n                       "),_("span",{staticClass:"hljs-comment"},[t._v("// 即任何一个小写字母开头的字符串")])])]),_("p",[t._v("我们来建一个可以包含 "),_("code",[t._v("type")]),t._v(" （以上的任意一种）的 "),_("code",[t._v("Token")]),t._v(" 类，以及一个可选的 value (比如 "),_("code",[t._v("LCID")]),t._v(" 的字符串)。")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[_("span",{staticClass:"hljs-class"},[_("span",{staticClass:"hljs-keyword"},[t._v("class")]),t._v(" "),_("span",{staticClass:"hljs-title"},[t._v("Token")]),t._v(" ")]),t._v("{\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("constructor")]),t._v("(type, value) {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".type = type;\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".value = value;\n  }\n};")])]),_("h2",{attrs:{id:"3-lexer-"}},[t._v("3. 词法分析器( Lexer )")]),t._v(" "),_("p",[t._v("现在我们可以拿上面定义的 token 来写 "),_("code",[t._v("词法分析器（Lexer）")]),t._v(" 了， 为解析器解析程序提供一个很棒的 "),_("em",[t._v("API")]),t._v(" 。")]),t._v(" "),_("p",[t._v("词法分析器的 token 生成的部分不是很好玩：这是一个大的 switch 语句，用来检查源代码中的下一个字符：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("_nextToken() {\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("switch")]),t._v(" (c) {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("case")]),t._v(" "),_("span",{staticClass:"hljs-string"},[t._v("'λ'")]),t._v(":\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("case")]),t._v(" "),_("span",{staticClass:"hljs-string"},[t._v("'\\\\'")]),t._v(":\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v("._token = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Token(Token.LAMBDA);\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("break")]),t._v(";\n\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("case")]),t._v(" "),_("span",{staticClass:"hljs-string"},[t._v("'.'")]),t._v(":\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v("._token = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Token(Token.DOT);\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("break")]),t._v(";\n\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("case")]),t._v(" "),_("span",{staticClass:"hljs-string"},[t._v("'('")]),t._v(":\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v("._token = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Token(Token.LPAREN);\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("break")]),t._v(";\n\n    "),_("span",{staticClass:"hljs-comment"},[t._v("/* ... */")]),t._v("\n  }\n}")])]),_("p",[t._v("下面这些方法是处理 token 的辅助方法：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("next(Token)")]),t._v(": 返回下一个 token 是否匹配 "),_("code",[t._v("Token")])]),t._v(" "),_("li",[_("code",[t._v("skip(Token)")]),t._v(": 和 "),_("code",[t._v("next")]),t._v(" 一样, 但如果匹配的话会跳过")]),t._v(" "),_("li",[_("code",[t._v("match(Token)")]),t._v(": 断言 "),_("code",[t._v("next")]),t._v(" 方法返回 true 并 "),_("code",[t._v("skip")])]),t._v(" "),_("li",[_("code",[t._v("token(Token)")]),t._v(": 断言 "),_("code",[t._v("next")]),t._v(" 方法返回 true 并返回 token")])]),t._v(" "),_("p",[t._v("OK，现在来看 “解析器”！")]),t._v(" "),_("h2",{attrs:{id:"4-"}},[t._v("4. 解析器")]),t._v(" "),_("p",[t._v("解析器基本上是语法的一个副本。我们基于每个 production 规则的名称（"),_("code",[t._v("::=")]),t._v(" 的左侧）为其创建一个方法，再来看右侧内容 —— 如果是全大写的单词，说明它是一个 "),_("em",[t._v("终止符")]),t._v(" （即一个 token ），词法分析器会用到它。如果是一个大写字母开头的单词，这是另外一段，所以同样为其调用 production 规则的方法。遇到 “/” （读作 “或”）的时候，要决定使用那一侧，这取决于基于哪一侧匹配我们的 token。")]),t._v(" "),_("p",[t._v("这个语法有点棘手的地方是：手写的解析器通常是"),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Recursive_descent_parser",target:"_blank"}},[t._v("递归下降（recursive descent）")]),t._v("的（我们的就是），它们无法处理左侧递归。你可能已经注意到了， "),_("code",[t._v("Application")]),t._v(" 的右侧开头包含 "),_("code",[t._v("Application")]),t._v(" 本身。所以如果我们只是遵循前面段落说到的流程，调用我们找到的所有 production，会导致无限递归。")]),t._v(" "),_("p",[t._v("幸运的是左递归可以用一个简单的技巧移除掉：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("Application ::= Atom Application'\n\nApplication' ::= Atom Application'\n                | ε  # empty")])]),_("h3",{attrs:{id:"4-1-ast-"}},[t._v("4.1. 抽象语法树 （AST）")]),t._v(" "),_("p",[t._v("进行分析时，需要以存储分析出的信息，为此要建立 "),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree",target:"_blank"}},[t._v("抽象语法树 ( AST )")]),t._v(" 。lambda 演算的 AST 非常简单，因为我们只有 3 种节点： Abstraction （抽象）， Application （应用）以及 Identifier （标识符）（译者注： 为方便理解，这三个单词不译）。")]),t._v(" "),_("p",[_("em",[t._v("Abstraction")]),t._v(" 持有其参数（param） 和主体（body）； "),_("em",[t._v("Application")]),t._v(" 则持有语句的左右侧； "),_("em",[t._v("Identifier")]),t._v(" 是一个叶节点，只有持有该标识符本身的字符串表示形式。")]),t._v(" "),_("p",[t._v("这是一个简单的程序及其 AST:")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("(λx. x) (λy. y)\n\nApplication {\n  "),_("span",{staticClass:"hljs-attr"},[t._v("abstraction")]),t._v(": Abstraction {\n    "),_("span",{staticClass:"hljs-attr"},[t._v("param")]),t._v(": Identifier { "),_("span",{staticClass:"hljs-attr"},[t._v("name")]),t._v(": "),_("span",{staticClass:"hljs-string"},[t._v("'x'")]),t._v(" },\n    "),_("span",{staticClass:"hljs-attr"},[t._v("body")]),t._v(": Identifier { "),_("span",{staticClass:"hljs-attr"},[t._v("name")]),t._v(": "),_("span",{staticClass:"hljs-string"},[t._v("'x'")]),t._v(" }\n  },\n  "),_("span",{staticClass:"hljs-attr"},[t._v("value")]),t._v(": Abstraction {\n    "),_("span",{staticClass:"hljs-attr"},[t._v("param")]),t._v(": Identifier { "),_("span",{staticClass:"hljs-attr"},[t._v("name")]),t._v(": "),_("span",{staticClass:"hljs-string"},[t._v("'y'")]),t._v(" },\n    "),_("span",{staticClass:"hljs-attr"},[t._v("body")]),t._v(": Identifier { "),_("span",{staticClass:"hljs-attr"},[t._v("name")]),t._v(": "),_("span",{staticClass:"hljs-string"},[t._v("'y'")]),t._v(" }\n  }\n}")])]),_("h3",{attrs:{id:"4-2-"}},[t._v("4.2. 解析器的实现")]),t._v(" "),_("p",[t._v("现在有了我们的 AST 节点，可以拿它们来建构真正的树了。下面是基于语法中的生成规则的分析方法：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("term() {\n  "),_("span",{staticClass:"hljs-comment"},[t._v("// Term ::= LAMBDA LCID DOT Term")]),t._v("\n  "),_("span",{staticClass:"hljs-comment"},[t._v("//        | Application")]),t._v("\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" ("),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lexer.skip(Token.LAMBDA)) {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" id = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" AST.Identifier("),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lexer.token(Token.LCID).value);\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lexer.match(Token.DOT);\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" term = "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".term();\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" AST.Abstraction(id, term);\n  }  "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".application();\n  }\n}\n\napplication() {\n  "),_("span",{staticClass:"hljs-comment"},[t._v("// Application ::= Atom Application'")]),t._v("\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("let")]),t._v(" lhs = "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".atom();\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("while")]),t._v(" ("),_("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(") {\n    "),_("span",{staticClass:"hljs-comment"},[t._v("// Application' ::= Atom Application'")]),t._v("\n    "),_("span",{staticClass:"hljs-comment"},[t._v("//                | ε")]),t._v("\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" rhs = "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".atom();\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (!rhs) {\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" lhs;\n    } "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n      lhs = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" AST.Application(lhs, rhs);\n    }\n  }\n}\n\natom() {\n  "),_("span",{staticClass:"hljs-comment"},[t._v("// Atom ::= LPAREN Term RPAREN")]),t._v("\n  "),_("span",{staticClass:"hljs-comment"},[t._v("//        | LCID")]),t._v("\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" ("),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lexer.skip(Token.LPAREN)) {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" term = "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".term(Token.RPAREN);\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lexer.match(Token.RPAREN);\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" term;\n  } "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" ("),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lexer.next(Token.LCID)) {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" id = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" AST.Identifier("),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lexer.token(Token.LCID).value);\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" id;\n  } "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),_("span",{staticClass:"hljs-literal"},[t._v("undefined")]),t._v(";\n  }\n}")])]),_("h2",{attrs:{id:"5-evaluation-"}},[t._v("5. 求值（Evaluation）")]),t._v(" "),_("p",[t._v("现在，我们可以用 AST 来给程序求值了。不过想知道我们的解释器长什么样子，还得先看看 lambda 的求值规则。")]),t._v(" "),_("h3",{attrs:{id:"5-1-"}},[t._v("5.1. 求值规则")]),t._v(" "),_("p",[t._v("首先，我们需要定义，什么是形式（terms）（从语法可以推断），什么是值（values）。")]),t._v(" "),_("p",[t._v("我们的 term 是:")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("t1 t2   # Application\n\nλx. t1  # Abstraction\n\nx       # Identifier")])]),_("p",[t._v("是的，这些几乎和我们的 AST 节点一模一样！但这其中哪些是 value？")]),t._v(" "),_("p",[t._v("value 是最终的形式，也就是说，它们不能再被求值了。在这个例子中，唯一的既是 term 又是 value 的是 abstraction（不能对函数求值，除非它被调用）。")]),t._v(" "),_("p",[t._v("实际的求值规则如下：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[t._v("1)       t1 -> t1'\n     _________________\n\n      t1 t2 -> t1' t2\n\n2)       t2 -> t2'\n     ________________\n\n      v1 t2 -> v1 t2'\n\n3)    (λx. t12) v2 -> [x -> v2]t12")])]),_("p",[t._v("我们可以这样解读每一条规则：")]),t._v(" "),_("ol",[_("li",[t._v("如果 "),_("code",[t._v("t1")]),t._v(" 是值为 "),_("code",[t._v("t1'")]),t._v(" 的项， "),_("code",[t._v("t1 t2")]),t._v(" 求值为 "),_("code",[t._v("t1' t2")]),t._v("。即一个 application 的左侧先被求值。")]),t._v(" "),_("li",[t._v("如果 "),_("code",[t._v("t2")]),t._v(" 是值为 "),_("code",[t._v("t2'")]),t._v(" 的项， "),_("code",[t._v("v1 t2")]),t._v(" 求值为 "),_("code",[t._v("v1 t2'")]),t._v("。注意这里左侧的是 "),_("code",[t._v("v1")]),t._v(" 而非 "),_("code",[t._v("t1")]),t._v("， 这意味着它是 value，不能再一步被求值，也就是说，只有左侧的完成之后，才会对右侧求值。")]),t._v(" "),_("li",[t._v("application "),_("code",[t._v("(λx. t12) v2")]),t._v(" 的结果，和 "),_("code",[t._v("t12")]),t._v(" 中出现的所有 "),_("code",[t._v("x")]),t._v(" 被有效替换之后是一样的。注意在对 application 求值之前，两侧必须都是 value。")])]),t._v(" "),_("h3",{attrs:{id:"5-2-"}},[t._v("5.2. 解释器")]),t._v(" "),_("p",[t._v("解释器遵循求值规则，将一个程序归化为 value。现在我们将上面的规则用 JavaScript 写出来：")]),t._v(" "),_("p",[t._v("首先定义一个工具，当某个节点是 value 的时候告诉我们：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" isValue = "),_("span",{staticClass:"hljs-function"},[_("span",{staticClass:"hljs-params"},[t._v("node")]),t._v(" =>")]),t._v(" node "),_("span",{staticClass:"hljs-keyword"},[t._v("instanceof")]),t._v(" AST.Abstraction;")])]),_("p",[t._v("好了，如果 node 是 abstraction，它就是 value；否则就不是。")]),t._v(" "),_("p",[t._v("接下来是解释器起作用的地方：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" "),_("span",{staticClass:"hljs-built_in"},[t._v("eval")]),t._v(" = "),_("span",{staticClass:"hljs-function"},[t._v("("),_("span",{staticClass:"hljs-params"},[t._v("ast, context={}")]),t._v(") =>")]),t._v(" {\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("while")]),t._v(" ("),_("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(") {\n    "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (ast "),_("span",{staticClass:"hljs-keyword"},[t._v("instanceof")]),t._v(" AST.Application) {\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (isValue(ast.lhs) && isValue(ast.rhs)) {\n        context[ast.lhs.param.name] = ast.rhs;\n        ast = "),_("span",{staticClass:"hljs-built_in"},[t._v("eval")]),t._v("(ast.lhs.body, context);\n      } "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (isValue(ast.lhs)) {\n        ast.rhs = "),_("span",{staticClass:"hljs-built_in"},[t._v("eval")]),t._v("(ast.rhs, "),_("span",{staticClass:"hljs-built_in"},[t._v("Object")]),t._v(".assign({}, context));\n      } "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n        ast.lhs = "),_("span",{staticClass:"hljs-built_in"},[t._v("eval")]),t._v("(ast.lhs, context);\n      }\n    } "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" "),_("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (ast "),_("span",{staticClass:"hljs-keyword"},[t._v("instanceof")]),t._v(" AST.Identifier) {\n       ast = context[ast.name];\n    } "),_("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n      "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" ast;\n    }\n  }\n};")])]),_("p",[t._v("代码有点密，但睁大眼睛好好看下，可以看到编码后的规则：")]),t._v(" "),_("ul",[_("li",[t._v("首先检测其是否为 application，如果是，则对其求值："),_("ul",[_("li",[t._v("若 abstraction 的两侧都是值，只要将所有出现的 "),_("code",[t._v("x")]),t._v(" 用给出的值替换掉； (3)")]),t._v(" "),_("li",[t._v("否则，若左侧为值，给右侧求值；(2)")]),t._v(" "),_("li",[t._v("如果上面都不行，只对左侧求值；(1)")])])]),t._v(" "),_("li",[t._v("现在，如果下一个节点是 identifier，我们只需将它替换为它所表示的变量绑定的值。")]),t._v(" "),_("li",[t._v("最后，如果没有规则适用于AST，这意味着它已经是一个 value，我们将它返回。")])]),t._v(" "),_("p",[t._v("另外一个值得提出的是上下文（context）。上下文持有从名字到值（AST节点）的绑定，举例来说，调用一个函数时，就说你说传的参数绑定到函数需要的变量上，然后再对函数体求值。")]),t._v(" "),_("p",[t._v("克隆上下文能保证一旦我们完成对右侧的求值，绑定的变量会从作用域出来，因为我们还持有原来的上下文。")]),t._v(" "),_("p",[t._v("如果不克隆上下文， application 右侧引入的绑定可能泄露并可以在左侧获取到 —— 这是不应当的。考虑下面的代码：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-haskell"},[t._v("(λx. y) ((λy. y) (λx. x))")])]),_("p",[t._v("这显然是无效程序： 最左侧 abstraction 中的标识符 "),_("code",[t._v("y")]),t._v("没有被绑定。来看下如果不克隆上下文，求值最后变成什么样。")]),t._v(" "),_("p",[t._v("左侧已经是一个 value，所以对右侧求值。这是个 application，所以会将 "),_("code",[t._v("(λx .x)")]),t._v(" 与 "),_("code",[t._v("y")]),t._v(" 绑定，然后对 "),_("code",[t._v("(λy. y)")]),t._v(" 求值，而这就是 "),_("code",[t._v("y")]),t._v(" 本身。所以最后的求值就成了 "),_("code",[t._v("(λx. x)")]),t._v("。")]),t._v(" "),_("p",[t._v("到目前，我们完成了右侧，它是 value，而 "),_("code",[t._v("y")]),t._v(" 超出了作用域，因为我们退出了 "),_("code",[t._v("(λy. y)")]),t._v("， 如果求值的时候不克隆上下文，我们会得到一个变化过的的上下文，绑定就会泄漏，"),_("code",[t._v("y")]),t._v(" 的值就是 "),_("code",[t._v("(λx. x)")]),t._v("，最后得到错误的结果。")]),t._v(" "),_("h2",{attrs:{id:"6-printing"}},[t._v("6. Printing")]),t._v(" "),_("p",[t._v("OK， 现在差不多完成了：已经可以将一个程序归化为 value，我们要做的就是想办法将这个 value 表示出来。")]),t._v(" "),_("p",[t._v("一个简单的 办法是为每个AST节点添加 "),_("code",[t._v("toString方法")]),t._v("：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[_("span",{staticClass:"hljs-comment"},[t._v("/* Abstraction */")]),t._v(" toString() {\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),_("span",{staticClass:"hljs-string"},[t._v("`(λ"),_("span",{staticClass:"hljs-subst"},[t._v("${"),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".param.toString()}")]),t._v(". "),_("span",{staticClass:"hljs-subst"},[t._v("${"),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".body.toString()}")]),t._v(")`")]),t._v(";\n}\n\n"),_("span",{staticClass:"hljs-comment"},[t._v("/* Application */")]),t._v(" toString() {\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),_("span",{staticClass:"hljs-string"},[t._v("`"),_("span",{staticClass:"hljs-subst"},[t._v("${"),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".lhs.toString()}")]),t._v(" "),_("span",{staticClass:"hljs-subst"},[t._v("${"),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".rhs.toString()}")]),t._v("`")]),t._v(";\n}\n\n"),_("span",{staticClass:"hljs-comment"},[t._v("/* Identifier */")]),t._v(" toString() {\n  "),_("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),_("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".name;\n}")])]),_("p",[t._v("现在我们可以在结果的根节点上调用 "),_("code",[t._v("toString")]),t._v("方法，它会递归打印所有子节点， 以生成字符串表示形式。")]),t._v(" "),_("h2",{attrs:{id:"7-"}},[t._v("7. 组合起来")]),t._v(" "),_("p",[t._v("我们需要一个脚本，将所有这些部分连接在一起，代码看起来是这样的：")]),t._v(" "),_("pre",[_("code",{staticClass:"hljs lang-javascript"},[_("span",{staticClass:"hljs-comment"},[t._v("// assuming you have some source")]),t._v("\n"),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" source = "),_("span",{staticClass:"hljs-string"},[t._v("'(λx. λy. x) (λx. x) (λy. y)'")]),t._v(";\n\n"),_("span",{staticClass:"hljs-comment"},[t._v("// wire all the pieces together")]),t._v("\n"),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" lexer = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Lexer(source);\n"),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" parser = "),_("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Parser(lexer);\n"),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" ast = parser.parse();\n"),_("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" result = Interpreter.eval(ast);\n\n"),_("span",{staticClass:"hljs-comment"},[t._v("// stringify the resulting node and print it")]),t._v("\n"),_("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log(result.toString());")])]),_("h2",{attrs:{id:"-"}},[t._v("源代码")]),t._v(" "),_("p",[t._v("完整实现可以在 Github 上找到： "),_("a",{attrs:{href:"https://github.com/tadeuzagallo/lc-js",target:"_blank"}},[t._v("github.com/tadeuzagallo/lc-js")])]),t._v(" "),_("h4",{attrs:{id:"-"}},[t._v("完成了！")]),t._v(" "),_("p",[t._v("感谢阅读，一如既往地欢迎你的反馈！")])])},[],!1,null,null,null);v.default=component.exports}}]);