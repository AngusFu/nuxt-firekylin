(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{229:function(t,n,l){"use strict";l.r(n);var _={computed:{data:function(){return{title:"[译] Node.js 中的队列",description:"Node.js 中的队列",keywords:"翻译,Node.js",pathname:"queues-in-node.js",translation:{author:"Pedro Teixeira",social:"http://blog.yld.io/author/pedro/",from:"http://blog.yld.io/2016/05/10/introducing-queues/"},create_time:"2016-06-25",prev:{title:"[译] 客户端存储",pathname:"client-side-storage"},next:{title:"[译] No WebSockets Over HTTP2",pathname:"no-websockets-over-http2"}}}}},v=l(3),component=Object(v.a)(_,function(){var t=this,n=t.$createElement,l=t._self._c||n;return l("post",{attrs:{data:t.data}},[l("p",[t._v("这是深入探索 Node.js 中使用工作队列（work queues）管理异步工作流的系列文章的第一篇，来自"),l("a",{attrs:{href:"http://nodepatternsbooks.com/",target:"_blank"}},[t._v("the Node Patterns series")]),t._v("。")]),t._v(" "),l("p",[l("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t0195a38b6ea509460d.png",expression:"`https://p.ssl.qhimg.com/t0195a38b6ea509460d.png`"}],attrs:{alt:"Node.js 中的队列"}})]),t._v(" "),l("p",[t._v("开始享受吧!")]),t._v(" "),l("hr"),t._v(" "),l("p",[t._v("很常见的是，在应用程序流中，应用有着可以异步处理的工作负载。一个常见的例子是发送邮件。比方说，新用户注册时，可能需要给 Ta 发送一封确认邮件来确认用户刚刚输入的 email 地址是 Ta 自己的。这包括从模板中生成消息，向电子邮件服务提供商发送请求，解析结果，处理任何可能发送的最终错误，重试，等等…… 这个流程可能比较复杂，容易出错，或者在 HTTP 服务器的周期中花费太长时间。不过也有另外一个选择，可以向持久化存储中插入一个文档，该文档描述我们有一条待发送给这个用户的消息。另一个进程可能拿到这个文档，做一些比较重的工作：从模板生成消息，向服务器发送请求，解析错误，并在必要的情况下重排这个工作。")]),t._v(" "),l("p",[t._v("此外，系统需要和其他系统整合的情况也很常见。在我曾做过的一些项目中，需要不同的系统之间的进行用户配置文件的双向同步：当用户在一个系统中更新了个人资料，这些变化需要传递给其他系统，反之亦然。如果两个系统之间不需要很强的一致性，资料同步之间有一个小的延迟也许是可接受的，那这项工作就可以使用另一个进程异步处理。")]),t._v(" "),l("p",[t._v("更一般地说，在整个系统中有一个工作队列将工作生产者和消费者分开，这是一种常见的模式。生产者往工作队列中插入工作，消费者从队列中拿到工作并执行需要的任务。")]),t._v(" "),l("p",[l("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t01a62cf9e49214926b.png",expression:"`https://p.ssl.qhimg.com/t01a62cf9e49214926b.png`"}],attrs:{alt:"工作队列"}})]),t._v(" "),l("p",[t._v("使用这样的拓扑结构有许多原因和优点，如：")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("解耦工作生产者和消费者")])]),t._v(" "),l("li",[l("p",[t._v("使重试逻辑更易于实现")])]),t._v(" "),l("li",[l("p",[t._v("跨时间分配工作负载")])]),t._v(" "),l("li",[l("p",[t._v("跨空间（nodes 节点）分配工作负载")])]),t._v(" "),l("li",[l("p",[t._v("异步工作")])]),t._v(" "),l("li",[l("p",[t._v("使外部系统更容易整合（最终的一致性）")])])]),t._v(" "),l("p",[t._v("让我们来分析一下其中的一些问题吧。")]),t._v(" "),l("h2",{attrs:{id:"-isolate-"}},[t._v("独立 （Isolate）")]),t._v(" "),l("p",[t._v("发送邮件是许多应用需要做的工作。一个例子是，用户修改了密码，一些应用很友好地发送邮件通知用户有人（最好不是其他人）修改了密码。现在发送邮件，通常是通过调用第三方邮件提供商提供的 HTTP API来完成的。如果服务缓慢或无法访问时候会怎样？你可不想就因为一封邮件发布出去就把密码给回滚了。当然，你也不想就因为在处理请求失败时碰到了工作中的一个非重要的部分，使得密码更改请求就这样崩掉了。密码修改后希望可以很快就发送出这封邮件，但不能有如此的代价。")]),t._v(" "),l("h2",{attrs:{id:"-retry-"}},[t._v("重试 （Retry）")]),t._v(" "),l("p",[t._v("还有，修改密码意味着，你要为这个用户在两个系统中都做更改：一个中央用户数据库和一个遗留系统（legacy system）。（我知道这很恶心啊，不过我可不止见过一次 —— 现实就这么骨感。）假如第一个成功了、第二个失败了，咋办？")]),t._v(" "),l("p",[t._v("在这些情形下，你可以想一直重试直至成功：在遗留系统中更改密码是一个可以多次重复的结果相同的操作，而邮件也可以重复发送多次。")]),t._v(" "),l("blockquote",[l("p",[t._v("举例子，假如遗留系统修改密码了但未能成功返回通知，如果操作是幂等的，你可以稍后重试。")]),t._v(" "),l("p",[t._v("甚至，非幂等操作也可以从工作队列处理中尝到甜头。比如，你可以将一次货币交易插入到工作队列中 ：给每次交易一个通用唯一标识符（UUID, universal unique identifier），稍后接收交易请求的系统可以保证不会发生重复交易。")]),t._v(" "),l("p",[t._v("在这个例子中，你基本只需要担心工作队列提供的必要的持久性保证：如果系统故障，你希望将交易丢失的风险降到最低。")])]),t._v(" "),l("h2",{attrs:{id:"-distribute-and-scale-"}},[t._v("分布及规模 （Distribute and scale）")]),t._v(" "),l("p",[t._v("另一个将工作生产者和消费者解耦的原因是，你可能想将工作集群规模化：如果任务消耗大量资源，如果任务是重 CPU 型的或者需要大量内存或操作系统资源，你可以将其与应用其他部分分离出来，放到工作队列中。")]),t._v(" "),l("p",[t._v("在任何应用中，一些操作比其他的要重。这可能会在整个节点引入有差异的工作负载：一个不幸的节点可能因处理太多的高并发业务而负担过重，而其它节点却被闲置。使用工作队列，将具体工作平均分配，可以将影响最小化。")]),t._v(" "),l("p",[t._v("工作队列的另一个效果是吸收工作峰（absorb work peaks）：你可以为工作集群计划给定的最大容量，并确保容量永远不会超过。如果工作数量在短时间内急剧上升，工作队列完全可以解决，远离工作峰的压力。")]),t._v(" "),l("blockquote",[l("p",[t._v("系统监控在这里起到重要作用：你应当持续监控工作队列的长度，工作时间（完成一项任务的时间），工作占用，以及容量，以确定在高峰时间保证令人满意的操作时间需要的最佳、最小的资源。")])]),t._v(" "),l("h2",{attrs:{id:"-survive-crashes-"}},[t._v("防止崩溃 （Survive crashes）")]),t._v(" "),l("p",[t._v("如果你不需要以上任何一点东西，使用持久化工作队列的一个理由是防止崩溃。即使是同一个进程中的内存队列也能满足你的应用需求，持续的队列使你的应用在进程重启的时候更具弹性。")]),t._v(" "),l("p",[t._v("好了，理论讲得差不多了 —— 我们来看具体实现。")]),t._v(" "),l("p",[t._v("可以设计出的最简单的工作队列是一个内存队列。实现内存队列可能是个学校的练习（留给读者）。这里我们使用 Async 的 queue。")]),t._v(" "),l("p",[t._v("假设你在做的这个演示应用和一个控制你的房子的硬件单元相连接。你的 Node.js 应用和该单元通过一个串行端口对话，且有线协议只能同时接受一个挂起的命令。")]),t._v(" "),l("p",[t._v("这个协议被包装在我们的 "),l("code",[t._v("domotic.js")]),t._v(" 模块中，模块暴露三个函数：")]),t._v(" "),l("ul",[l("li",[l("p",[l("code",[t._v(".connect()")]),t._v(" - 连接 domotic 模块")])]),t._v(" "),l("li",[l("p",[l("code",[t._v(".command()")]),t._v(" - 发送命令，等待响应")])]),t._v(" "),l("li",[l("p",[l("code",[t._v(".disconnect()")]),t._v(" - 切断与模块的连接")])])]),t._v(" "),l("p",[t._v("下面的代码模拟了这样一个模块：")]),t._v(" "),l("p",[l("strong",[t._v("domotic.js:")])]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[t._v("exports.connect = connect;  \nexports.command = command;  \nexports.disconnect = disconnect;\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("connect")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("cb")]),t._v(") ")]),t._v("{  \n  setTimeout(cb, "),l("span",{staticClass:"hljs-number"},[t._v("100")]),t._v("); "),l("span",{staticClass:"hljs-comment"},[t._v("// simulate connection")]),t._v("\n}\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("command")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("cmd, options, cb")]),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (succeeds()) {\n    setTimeout(cb, "),l("span",{staticClass:"hljs-number"},[t._v("100")]),t._v("); "),l("span",{staticClass:"hljs-comment"},[t._v("// simulate command")]),t._v("\n  } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n    setTimeout("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" err = "),l("span",{staticClass:"hljs-built_in"},[t._v("Error")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'error connecting'")]),t._v(");\n      err.code = "),l("span",{staticClass:"hljs-string"},[t._v("'ECONN'")]),t._v(";\n      cb(err);\n    }, "),l("span",{staticClass:"hljs-number"},[t._v("100")]),t._v(");\n  }\n\n}\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("disconnect")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("cb")]),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (cb) setTimeout(cb, "),l("span",{staticClass:"hljs-number"},[t._v("100")]),t._v("); "),l("span",{staticClass:"hljs-comment"},[t._v("// simulate disconnection")]),t._v("\n}\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("succeeds")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-built_in"},[t._v("Math")]),t._v(".random() > "),l("span",{staticClass:"hljs-number"},[t._v("0.5")]),t._v(";\n}")])]),l("blockquote",[l("p",[t._v("注意我们并没有和任何 domotic 模块交互；我们只是假装，100 毫秒后成功调用回调函数。")]),t._v(" "),l("p",[t._v("同样， "),l("code",[t._v(".command")]),t._v(" 函数模拟了连接错误： 如果 "),l("code",[t._v("succeeds()")]),t._v(" 返回 "),l("code",[t._v("false")]),t._v("，连接失败，命令失败，这有 50% 的可能性（我们的 domotic 串行连接很容易出错）。这使我们能够测试在发生失败之后，我们的应用是否会成功重连并重试命令。")])]),t._v(" "),l("p",[t._v("然后我们新建另一个模块，可以在队列后面发出命令。")]),t._v(" "),l("p",[l("strong",[t._v("domotic_queue.js:")])]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" "),l("span",{staticClass:"hljs-keyword"},[t._v("async")]),t._v(" = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'async'")]),t._v(");  \n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" Backoff = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'backoff'")]),t._v(");  \n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" domotic = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'./domotic'")]),t._v(");\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" connected = "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(";\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" queue = "),l("span",{staticClass:"hljs-keyword"},[t._v("async")]),t._v(".queue(work, "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(");\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("work")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("item, cb")]),t._v(") ")]),t._v("{  \n  ensureConnected("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n    domotic.command(item.command, item.options, callback);\n  });\n\n  "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("callback")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (err && err.code == "),l("span",{staticClass:"hljs-string"},[t._v("'ECONN'")]),t._v(") {\n      connected = "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(";\n      work(item);\n    } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" cb(err);\n  }\n}\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("/// command")]),t._v("\n\nexports.command = pushCommand;\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("pushCommand")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("command, options, cb")]),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" work = {\n    "),l("span",{staticClass:"hljs-attr"},[t._v("command")]),t._v(": command,\n    "),l("span",{staticClass:"hljs-attr"},[t._v("options")]),t._v(": options\n  };\n\n  "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'pushing command'")]),t._v(", work);\n\n  queue.push(work, cb);\n}\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("ensureConnected")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("cb")]),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (connected) {\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" cb();\n  } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" backoff = Backoff.fibonacci();\n    backoff.on("),l("span",{staticClass:"hljs-string"},[t._v("'backoff'")]),t._v(", connect);\n    backoff.backoff();\n  }\n\n  "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("connect")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n    domotic.connect(connected);\n  }\n\n  "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("connected")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (err) {\n      backoff.backoff();\n    } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n      connected = "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(";\n      cb();\n    }\n  }\n}\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("/// disconnect")]),t._v("\n\nexports.disconnect = disconnect;\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("disconnect")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (! queue.length()) {\n    domotic.disconnect();\n  } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n    "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'waiting for the queue to drain before disonnecting'")]),t._v(");\n    queue.drain = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n      "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'disconnecting'")]),t._v(");\n      domotic.disconnect();\n    };\n  }\n}")])]),l("p",[t._v("做了不少工作 —— 我们来一段段地分析。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" "),l("span",{staticClass:"hljs-keyword"},[t._v("async")]),t._v(" = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'async'")]),t._v(");  \n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" Backoff = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'backoff'")]),t._v(");  \n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" domotic = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'./domotic'")]),t._v(");")])]),l("p",[t._v("这里我们引入了一些包： ")]),t._v(" "),l("ul",[l("li",[l("p",[l("code",[t._v("async")]),t._v(" - 提供内存队列的实现")])]),t._v(" "),l("li",[l("p",[l("code",[t._v("backoff")]),t._v(" - 让我们增加每一次失败后尝试重新连接的时间间隔")])]),t._v(" "),l("li",[l("p",[l("code",[t._v("./domotic")]),t._v(" - 模拟 domotic 的模块")])])]),t._v(" "),l("p",[t._v("我们的模块从连接断开状态开始启动：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-string"},[t._v("`var connected = false;`")])])]),l("p",[t._v("建立我们的 async 队列：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-string"},[t._v("`var queue = async.queue(work, 1);`")])])]),l("p",[t._v("这里提供一个叫做 "),l("code",[t._v("worker")]),t._v(" 的工作函数（在代码中进一步定义的）和一个最大并发量 1。我们在这里强制设置，是因为我们定义了 domotic 模块协议一次只允许一个命令。")]),t._v(" "),l("p",[t._v("然后定义 "),l("code",[t._v("worker")]),t._v(" 函数，它每次处理一个队列元素：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("work")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("item, cb")]),t._v(") ")]),t._v("{  \n  ensureConnected("),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n    domotic.command(item.command, item.options, callback);\n  });\n\n  "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("callback")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (err && err.code == "),l("span",{staticClass:"hljs-string"},[t._v("'ECONN'")]),t._v(") {\n      connected = "),l("span",{staticClass:"hljs-literal"},[t._v("false")]),t._v(";\n      work(item);\n    } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" cb(err);\n  }\n}")])]),l("p",[t._v("当我们的 "),l("code",[t._v("async")]),t._v(" 队列加入另一个工作项目，会调用 "),l("code",[t._v("work")]),t._v(" 函数，传递该工作项目和一个当工作完成时候为我们所调用的回调函数。")]),t._v(" "),l("p",[t._v("对每个工作项目来说，我们要确认已经连接了。一旦连接上，使用工作项目中会有的 "),l("code",[t._v("command")]),t._v(" 和 "),l("code",[t._v("options")]),t._v(" 属性，来用 domotic 模块来执行命令。传的最后一次参数是一个回调函数，当命令成功或失败之后会立即被调用。")]),t._v(" "),l("p",[t._v("回调函数中，我们明确地处理连接错误的情况，设置 "),l("code",[t._v("connected")]),t._v(" 状态为 "),l("code",[t._v("false")]),t._v("，并再次调用 "),l("code",[t._v("work")]),t._v("重连。")]),t._v(" "),l("p",[t._v("如果没有发生错误，调用回调函数 "),l("code",[t._v("cb")]),t._v(" 结束当前工作项目。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("ensureConnected")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("cb")]),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (connected) {\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" cb();\n  } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" backoff = Backoff.fibonacci();\n    backoff.on("),l("span",{staticClass:"hljs-string"},[t._v("'backoff'")]),t._v(", connect);\n    backoff.backoff();\n  }\n\n  "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("connect")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n    domotic.connect(connected);\n  }\n\n  "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("connected")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (err) {\n      backoff.backoff();\n    } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n      connected = "),l("span",{staticClass:"hljs-literal"},[t._v("true")]),t._v(";\n      cb();\n    }\n  }\n}")])]),l("p",[l("code",[t._v("ensureConnected")]),t._v(" 函数现在负责处于连接状态时调用回调或相反情况下尝试连接。尝试连接的时候，使用 "),l("code",[t._v("backoff")]),t._v(" 增加每次重连的时间间隔。 每次 "),l("code",[t._v("domotic.connect")]),t._v(" 函数带着错误被调用，在 "),l("code",[t._v("backoff")]),t._v(" 事件触发之前增加间隔时间。触发 "),l("code",[t._v("backoff")]),t._v(" 时，尝试连接。一旦连接成功，调用 "),l("code",[t._v("cb")]),t._v(" 回调；否则保持重试。")]),t._v(" "),l("p",[t._v("这个模块暴露一个 "),l("code",[t._v(".command")]),t._v(" 函数：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("/// command")]),t._v("\n\nexports.command = pushCommand;\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("pushCommand")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("command, options, cb")]),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" work = {\n    "),l("span",{staticClass:"hljs-attr"},[t._v("command")]),t._v(": command,\n    "),l("span",{staticClass:"hljs-attr"},[t._v("options")]),t._v(": options\n  };\n\n  "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'pushing command'")]),t._v(", work);\n\n  queue.push(work, cb);\n}")])]),l("p",[t._v("这个命令简单的解析一个工作项目并将其推入队列。")]),t._v(" "),l("p",[t._v("最后，这个模块同样暴露出 "),l("code",[t._v(".disconnect")]),t._v(" 函数。")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("/// disconnect")]),t._v("\n\nexports.disconnect = disconnect;\n\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("disconnect")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{  \n  "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (! queue.length()) {\n    domotic.disconnect();\n  } "),l("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n    "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'waiting for the queue to drain before disonnecting'")]),t._v(");\n    queue.drain = "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n      "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'disconnecting'")]),t._v(");\n      domotic.disconnect();\n    };\n  }\n}")])]),l("p",[t._v("这里我们只是确保在调用 domotic 模块的 "),l("code",[t._v("disconnected")]),t._v(" 方法之前队列是空的。如果队列非空，在真正断开连接之前会等待其耗尽（drain）。")]),t._v(" "),l("blockquote",[l("p",[t._v("可选：在队列未被耗尽的情况下，您可以设置一个超时时间，然后强制断开连接。")])]),t._v(" "),l("p",[t._v("然后我们来新建一个 domotic 客户端：")]),t._v(" "),l("p",[l("strong",[t._v("client.js:")])]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" domotic = "),l("span",{staticClass:"hljs-built_in"},[t._v("require")]),t._v("("),l("span",{staticClass:"hljs-string"},[t._v("'./domotic_queue'")]),t._v(");\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v("("),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(" ; i < "),l("span",{staticClass:"hljs-number"},[t._v("20")]),t._v("; i ++) {  \n  domotic.command("),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", i, "),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("err")]),t._v(") ")]),t._v("{\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (err) "),l("span",{staticClass:"hljs-keyword"},[t._v("throw")]),t._v(" err;\n    "),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".log("),l("span",{staticClass:"hljs-string"},[t._v("'command finished'")]),t._v(");\n  });\n}\n\ndomotic.disconnect();")])]),l("p",[t._v("这里我们并行得向 domotic 模块添加了 20 个  "),l("code",[t._v("settime")]),t._v(" 命令，同时传递了回调函数，当命令完成时就会被调用。如果有命令出错，简单地抛出错误并中断执行。")]),t._v(" "),l("p",[t._v("添加所有命令之后我们马上断开连接，不过模块会等待所有命令被执行之后才会真正将其断开。")]),t._v(" "),l("p",[t._v("让我们在命令行中试一下：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-bash"},[t._v("$ node client.js\npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 0 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 1 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 2 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 3 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 4 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 5 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 6 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 7 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 8 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 9 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 10 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 11 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 12 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 13 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 14 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 15 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 16 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 17 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 18 }  \npushing "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" { "),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(": "),l("span",{staticClass:"hljs-string"},[t._v("'toggle light'")]),t._v(", options: 19 }  \nwaiting "),l("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" the queue to drain before disonnecting  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \n"),l("span",{staticClass:"hljs-built_in"},[t._v("command")]),t._v(" finished  \ndisconnecting")])]),l("p",[t._v("这里我们可以看到，所有命令被立即放到队列中，并且命令是被一些随机时间间隔着有序完成的。最后，所有命令完成之后连接切断。")]),t._v(" "),l("h2",{attrs:{id:"-"}},[t._v("下一篇文章")]),t._v(" "),l("p",[t._v("本系列的下一篇文章，我们将探索如何避免崩溃以及通过持久化工作项目来限制内存影响。")])])},[],!1,null,null,null);n.default=component.exports}}]);