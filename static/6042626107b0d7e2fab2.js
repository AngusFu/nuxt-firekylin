(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{169:function(t,n,l){"use strict";l.r(n);var v={computed:{data:function(){return{title:"算法学习：选择排序",description:"算法学习：选择排序",keywords:"原创,JavaScript,算法",pathname:"algo-selection-sort",translation:null,create_time:"2016-11-06",prev:{title:"算法学习：冒泡排序",pathname:"algo-bubble-sort"},next:{title:"[译] HTML 表单验证",pathname:"using-html-form-validation-in-pure-javascript"}}}}},_=l(3),component=Object(_.a)(v,function(){var t=this,n=t.$createElement,l=t._self._c||n;return l("post",{attrs:{data:t.data}},[l("p",[t._v("所谓“选择排序”，基本思路就是不断从数组中选择出最小的数。")]),t._v(" "),l("p",[t._v("还是以扑克牌为例。假设有 N 张扑克牌，记扑克牌集合为 cards，则我们的基本操作如下：")]),t._v(" "),l("p",[t._v("首先，从手中拿出左侧第 0 张牌 cardA；")]),t._v(" "),l("p",[t._v("第二步，将 cardA 向右"),l("strong",[t._v("依次")]),t._v("与剩下的  (N - 1) 张牌进行对比，找出最小的那张牌所在的位置 minIndex；")]),t._v(" "),l("p",[t._v("第三步，对比完成后，若 minIndex 不等于 1，则说明 cardA 不是最小的，将 cards[minIndex] 与 cardA 进行位置交换。")]),t._v(" "),l("p",[t._v("第四步，从第二张牌开始，重复前面的步骤……")]),t._v(" "),l("p",[t._v("……")]),t._v(" "),l("p",[t._v("最后得到的数组即是排序好的。")]),t._v(" "),l("p",[t._v("实现如下：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-comment"},[t._v("// 选择排序")]),t._v("\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("selectionSort")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("cards")]),t._v(") ")]),t._v("{\n  cards = cards.slice("),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(");\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" len = cards.length;\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" i = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(";\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" j = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(";\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" minIndex = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(";\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" temp = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(";\n\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" (i = "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("; i < len - "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v("; i++) {\n    "),l("span",{staticClass:"hljs-comment"},[t._v("// 将当前的数字与后面子序列中最小数进行换位")]),t._v("\n    "),l("span",{staticClass:"hljs-comment"},[t._v("// 这样每次拿到前面的都是最小的数字")]),t._v("\n    minIndex = i;\n\n    "),l("span",{staticClass:"hljs-comment"},[t._v("// 寻找子序列中最小数的索引")]),t._v("\n    "),l("span",{staticClass:"hljs-comment"},[t._v("// 每一轮得比较 n - i 次")]),t._v("\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" (j = i + "),l("span",{staticClass:"hljs-number"},[t._v("1")]),t._v("; j < len; j++) {\n      "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (cards[j] < cards[minIndex]) {\n        minIndex = j;\n      }\n    }\n\n    "),l("span",{staticClass:"hljs-comment"},[t._v("// 如果当前数比后面子序列最小元素大")]),t._v("\n    "),l("span",{staticClass:"hljs-comment"},[t._v("// 则进行换位处理")]),t._v("\n    "),l("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (minIndex !== i) {\n      temp = cards[i];\n      cards[i] = cards[minIndex];\n      cards[minIndex] = temp;\n    }\n  }\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" cards;\n}")])]),l("p",[t._v("来粗略看下时间复杂度的问题。")]),t._v(" "),l("p",[t._v("实际上，这个算法，"),l("strong",[t._v("不存在最好的情况和最坏的情况")]),t._v("。因为每次通过比较寻找最小数时，必须将所有剩余数字对比个遍。")]),t._v(" "),l("p",[t._v("第一次需要与 (N - 1) 个数进行对比；第二次需要与 (N - 2 个数) 对比，直到最后。总的计算次数为 "),l("code",[t._v("(N - 1) + (N - 2) + ... + 1 + 0 = N * (N - 1) / 2")]),t._v("。不难看出，"),l("strong",[t._v("时间复杂度是 "),l("code",[t._v("O(n^n)")])]),t._v("。")]),t._v(" "),l("p",[t._v("在 JavaScript 中，与"),l("a",{attrs:{href:"../algo-insertion-sort/"}},[t._v("插入排序")]),t._v("比较，感觉选择排序比较好的一点是，没有频繁的元素位置调换，每次只会进行一次交换这一点上，性能应该会好很多（尤其是数组较大的情况下）。可以参考 "),l("a",{attrs:{href:"https://jsfiddle.net/wemlin/hf4bz4mc/",target:"_blank"}},[t._v("测试Demo")]),t._v("。")]),t._v(" "),l("p",[t._v("每次使用的数组都长度为 1000、元素为在 (0, 10000) 区间中的整数的随机数组，每种方法分别测试 10000次，最终取计算时间平均值。结果插入排序每次时间大约在 0.9 毫秒左右，而选择排序在 0.6 毫秒左右，但注意，这里的时间"),l("strong",[t._v("包含")]),t._v("生成随机数组的时间。")]),t._v(" "),l("p",[t._v("也可以用 node 来测试（排序函数代码略）：")]),t._v(" "),l("pre",[l("code",{staticClass:"hljs lang-javascript"},[l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" times = "),l("span",{staticClass:"hljs-number"},[t._v("10000")]),t._v(";\n\n"),l("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" t = times;\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),l("span",{staticClass:"hljs-string"},[t._v("'selectionSort'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("while")]),t._v(" (t--) {\n    selectionSort(getRandArray("),l("span",{staticClass:"hljs-number"},[t._v("1000")]),t._v("));\n}\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".timeEnd("),l("span",{staticClass:"hljs-string"},[t._v("'selectionSort'")]),t._v(");\n\n\nt = times;\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".time("),l("span",{staticClass:"hljs-string"},[t._v("'insertionSort'")]),t._v(");\n"),l("span",{staticClass:"hljs-keyword"},[t._v("while")]),t._v(" (t--) {\n  insertionSort(getRandArray("),l("span",{staticClass:"hljs-number"},[t._v("1000")]),t._v("));\n}\n"),l("span",{staticClass:"hljs-built_in"},[t._v("console")]),t._v(".timeEnd("),l("span",{staticClass:"hljs-string"},[t._v("'insertionSort'")]),t._v(");\n\n"),l("span",{staticClass:"hljs-comment"},[t._v("// 获取指定长度的元素大小在 0 到 10000 之间的随机数组")]),t._v("\n"),l("span",{staticClass:"hljs-function"},[l("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),l("span",{staticClass:"hljs-title"},[t._v("getRandArray")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("len")]),t._v(") ")]),t._v("{\n  "),l("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),l("span",{staticClass:"hljs-function"},[t._v("("),l("span",{staticClass:"hljs-params"},[l("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" "),l("span",{staticClass:"hljs-built_in"},[t._v("Array")]),t._v("(len")]),t._v("))."),l("span",{staticClass:"hljs-params"},[t._v("fill")]),t._v("("),l("span",{staticClass:"hljs-params"},[l("span",{staticClass:"hljs-number"},[t._v("0")])]),t._v(")."),l("span",{staticClass:"hljs-params"},[t._v("map")]),t._v("("),l("span",{staticClass:"hljs-params"},[t._v("(i")]),t._v(") =>")]),t._v(" "),l("span",{staticClass:"hljs-built_in"},[t._v("Math")]),t._v(".random() * "),l("span",{staticClass:"hljs-number"},[t._v("10000")]),t._v(" | "),l("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(");\n}")])])])},[],!1,null,null,null);n.default=component.exports}}]);